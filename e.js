
function _bag() {
  this.x = this.y = this.h = this.v = this.xr = this.yr = this.dir = this.wt = this.gt = this.fallh = 0;
  this.wobbling = this.unfallen = this.exist = false;
}

_bag.prototype.copyFrom = function(t) {
  this.x = t.x;
  this.y = t.y;
  this.h = t.h;
  this.v = t.v;
  this.xr = t.xr;
  this.yr = t.yr;
  this.dir = t.dir;
  this.wt = t.wt;
  this.gt = t.gt;
  this.fallh = t.fallh;
  this.wobbling = t.wobbling;
  this.unfallen = t.unfallen;
  this.exist = t.exist;
}



function DBags(_d) {

var dig = _d;

var bagdat1 = [ new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag() ], 
bagdat2 = [ new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag() ], 
bagdat  = [ new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag(), new _bag() ];

var pushcount=0, goldtime=0;

var wblanim = [2,0,1,0];

function setdg(_d) { 
  dig = _d;
}

function bagbits () {
  var bag,b,bags=0;
  for (bag=1,b=2;bag<8;bag++,b<<=1)
	if (bagdat[bag].exist)
	  bags|=b;
  return bags;
}

function baghitground (bag) {
  var bn,b,clbits;
  if (bagdat[bag].dir==6 && bagdat[bag].fallh>1)
	bagdat[bag].gt=1;
  else
	bagdat[bag].fallh=0;
  bagdat[bag].dir=-1;
  bagdat[bag].wt=15;
  bagdat[bag].wobbling=false;
  clbits=dig.Drawing.drawgold(bag,0,bagdat[bag].x,bagdat[bag].y);
  dig.Main.incpenalty();
  for (bn=1,b=2;bn<8;bn++,b<<=1)
	if ((b&clbits)!=0)
	  removebag(bn);
}

function bagy (bag) {
  return bagdat[bag].y;
}

function cleanupbags () {
  var bpa;
  dig.Sound.soundfalloff();
  for (bpa=1;bpa<8;bpa++) {
    if (bagdat[bpa].exist && ((bagdat[bpa].h==7 && bagdat[bpa].v==9) ||
	bagdat[bpa].xr!=0 || bagdat[bpa].yr!=0 || bagdat[bpa].gt!=0 ||
	bagdat[bpa].fallh!=0 || bagdat[bpa].wobbling)) {
	    bagdat[bpa].exist=false;
	    dig.Sprite.erasespr(bpa);
    }
    if (dig.Main.getcplayer()==0)
	bagdat1[bpa].copyFrom(bagdat[bpa]);
    else
	bagdat2[bpa].copyFrom(bagdat[bpa]);
  }
}

function dobags () {
  var bag;
  var soundfalloffflag=true,soundwobbleoffflag=true;
  for (bag=1;bag<8;bag++)
	if (bagdat[bag].exist) {
	  if (bagdat[bag].gt!=0) {
		if (bagdat[bag].gt==1) {
		  dig.Sound.soundbreak();
		  dig.Drawing.drawgold(bag,4,bagdat[bag].x,bagdat[bag].y);
		  dig.Main.incpenalty();
		}
		if (bagdat[bag].gt==3) {
		  dig.Drawing.drawgold(bag,5,bagdat[bag].x,bagdat[bag].y);
		  dig.Main.incpenalty();
		}
		if (bagdat[bag].gt==5) {
		  dig.Drawing.drawgold(bag,6,bagdat[bag].x,bagdat[bag].y);
		  dig.Main.incpenalty();
		}
		bagdat[bag].gt++;
		if (bagdat[bag].gt==goldtime)
		  removebag(bag);
		else
		  if (bagdat[bag].v<9 && bagdat[bag].gt<goldtime-10)
			if ((dig.Monster.getfield(bagdat[bag].h,bagdat[bag].v+1)&0x2000)==0)
			  bagdat[bag].gt=goldtime-10;
	  }
	  else
		updatebag(bag);
	}
  for (bag=1;bag<8;bag++) {
	if (bagdat[bag].dir==6 && bagdat[bag].exist)
	  soundfalloffflag=false;
	if (bagdat[bag].dir!=6 && bagdat[bag].wobbling && bagdat[bag].exist)
	  soundwobbleoffflag=false;
  }
  if (soundfalloffflag)
    dig.Sound.soundfalloff();
  if (soundwobbleoffflag)
    dig.Sound.soundwobbleoff();
}

function drawbags () {
  var bag;
  for (bag=1;bag<8;bag++) {
  if (dig.Main.getcplayer()==0)
  	bagdat[bag].copyFrom (bagdat1[bag]);
	else
		bagdat[bag].copyFrom (bagdat2[bag]);
	if (bagdat[bag].exist)
	  dig.Sprite.movedrawspr(bag,bagdat[bag].x,bagdat[bag].y);
  }
}

function getbagdir (bag) {
  if (bagdat[bag].exist)
	return bagdat[bag].dir;
  return -1;
}

function getgold (bag) {
  var clbits;
  clbits=dig.Drawing.drawgold(bag,6,bagdat[bag].x,bagdat[bag].y);
  dig.Main.incpenalty();
  if ((clbits&1)!=0) {
	dig.Scores.scoregold();
	dig.Sound.soundgold();
	dig.digtime_w(0);
  }
  else
	dig.Monster.mongold();
  removebag(bag);
}

function getnmovingbags () {
  var bag,n=0;
  for (bag=1;bag<8;bag++)
	if (bagdat[bag].exist && bagdat[bag].gt<10 &&
		(bagdat[bag].gt!=0 || bagdat[bag].wobbling))
	  n++;
  return n;
}

function initbags () {
  var bag,x,y,i;
  pushcount=0;
  goldtime=150-dig.Main.levof10()*10;
  for (bag=1;bag<8;bag++)
	bagdat[bag].exist=false;
  bag=1;
  for (x=0;x<15;x++)
	for (y=0;y<10;y++)
	  if (dig.Main.getlevch(x,y,dig.Main.levplan())=='B')
		if (bag<8) {
		  bagdat[bag].exist=true;
		  bagdat[bag].gt=0;
		  bagdat[bag].fallh=0;
		  bagdat[bag].dir=-1;
		  bagdat[bag].wobbling=false;
		  bagdat[bag].wt=15;
		  bagdat[bag].unfallen=true;
		  bagdat[bag].x=x*20+12;
		  bagdat[bag].y=y*18+18;
		  bagdat[bag].h=x;
		  bagdat[bag].v=y;
		  bagdat[bag].xr=0;
		  bagdat[bag++].yr=0;
		}
  if (dig.Main.getcplayer()==0)
  	for (i=1;i<8;i++)
  		bagdat1[i].copyFrom(bagdat[i]);
  else
  	for (i=1;i<8;i++)
  		bagdat2[i].copyFrom(bagdat[i]);
}


function pushbag (bag, dir) {	// r: boolean
  var x,y,h,v,ox,oy,clbits;
  var push=true;
  ox=x=bagdat[bag].x;
  oy=y=bagdat[bag].y;
  h=bagdat[bag].h;
  v=bagdat[bag].v;
  if (bagdat[bag].gt!=0) {
		getgold(bag);
		return true;
  }
  if (bagdat[bag].dir==6 && (dir==4 || dir==0)) {
		clbits=dig.Drawing.drawgold(bag,3,x,y);
		dig.Main.incpenalty();
		if (((clbits&1)!=0) && (dig.diggery_r()>=y))
		  dig.killdigger(1,bag);
		if ((clbits&0x3f00)!=0)
		  dig.Monster.squashmonsters(bag,clbits);
		return true;
  }
  if ((x==292 && dir==0) || (x==12 && dir==4) || (y==180 && dir==6) ||
	  (y==18 && dir==2))
	push=false;
  if (push) {
	switch (dir) {
	  case 0:
		x+=4;
		break;
	  case 4:
		x-=4;
		break;
	  case 6:
		if (bagdat[bag].unfallen) {
		  bagdat[bag].unfallen=false;
		  dig.Drawing.drawsquareblob(x,y);
		  dig.Drawing.drawtopblob(x,y+21);
		}
		else
		  dig.Drawing.drawfurryblob(x,y);
		dig.Drawing.eatfield(x,y,dir);
		dig.killemerald(h,v);
		y+=6;
	}
	switch(dir) {
	  case 6:
		clbits=dig.Drawing.drawgold(bag,3,x,y);
		dig.Main.incpenalty();
		if (((clbits&1)!=0) && dig.diggery_r()>=y)
		  dig.killdigger(1,bag);
		if ((clbits&0x3f00)!=0)
		  dig.Monster.squashmonsters(bag,clbits);
		break;
	  case 0:
	  case 4:
		bagdat[bag].wt=15;
		bagdat[bag].wobbling=false;
		clbits=dig.Drawing.drawgold(bag,0,x,y);
		dig.Main.incpenalty();
		pushcount=1;
		if ((clbits&0xfe)!=0)
		  if (!pushbags(dir,clbits)) {
			x=ox;
			y=oy;
			dig.Drawing.drawgold(bag,0,ox,oy);
			dig.Main.incpenalty();
			push=false;
		  }
		if (((clbits&1)!=0) || ((clbits&0x3f00)!=0)) {
		  x=ox;
		  y=oy;
		  dig.Drawing.drawgold(bag,0,ox,oy);
		  dig.Main.incpenalty();
		  push=false;
		}
	}
	if (push)
	  bagdat[bag].dir=dir;
	else
	  bagdat[bag].dir=dig.reversedir(dir);
	bagdat[bag].x=x;
	bagdat[bag].y=y;
	bagdat[bag].h=Math.floor((x-12)/20);
	bagdat[bag].v=Math.floor((y-18)/18);
	bagdat[bag].xr=(x-12)%20;
	bagdat[bag].yr=(y-18)%18;
  }
  return push;
}

function pushbags (dir, bits) {	// r: boolean
  var bag,bit;
  var push=true;
  for (bag=1,bit=2;bag<8;bag++,bit<<=1)
	if ((bits&bit)!=0)
	  if (!pushbag(bag,dir))
		push=false;
  return push;
}

function pushudbags (bits) { // r: boolean
  var bag,b;
  var push=true;
  for (bag=1,b=2;bag<8;bag++,b<<=1)
	if ((bits&b)!=0)
	  if (bagdat[bag].gt!=0)
		getgold(bag);
	  else
		push=false;
  return push;
}

function removebag (bag) {
  if (bagdat[bag].exist) {
	bagdat[bag].exist=false;
	dig.Sprite.erasespr(bag);
  }
}

function removebags (bits) {
  var bag,b;
  for (bag=1,b=2;bag<8;bag++,b<<=1)
	if ((bagdat[bag].exist) && ((bits&b)!=0))
	  removebag(bag);
}


function updatebag (bag) {
  var x,h,xr,y,v,yr,wbl;
  x=bagdat[bag].x;
  h=bagdat[bag].h;
  xr=bagdat[bag].xr;
  y=bagdat[bag].y;
  v=bagdat[bag].v;
  yr=bagdat[bag].yr;
  switch (bagdat[bag].dir) {
	case -1:
	  if (y<180 && xr==0) {
		if (bagdat[bag].wobbling) {
		  if (bagdat[bag].wt==0) {
			bagdat[bag].dir=6;
			dig.Sound.soundfall();
			break;
		  }
		  bagdat[bag].wt--;
		  wbl=bagdat[bag].wt%8;
		  if (!((wbl&1)!=0)) {
			dig.Drawing.drawgold(bag,wblanim[wbl>>1],x,y);
			dig.Main.incpenalty();
			dig.Sound.soundwobble(bagdat[bag].wt);
		  }
		}
		else
		  if ((dig.Monster.getfield(h,v+1)&0xfdf)!=0xfdf)
			if (!dig.checkdiggerunderbag(h,v+1))
			  bagdat[bag].wobbling=true;
	  }
	  else {
		bagdat[bag].wt=15;
		bagdat[bag].wobbling=false;
	  }
	  break;
	case 0:
	case 4:
	  if (xr==0)
		if (y<180 && (dig.Monster.getfield(h,v+1)&0xfdf)!=0xfdf) {
		  bagdat[bag].dir=6;
		  bagdat[bag].wt=0;
		  dig.Sound.soundfall();
		}
		else
		  baghitground(bag);
	  break;
	case 6:
	  if (yr==0)
		bagdat[bag].fallh++;
	  if (y>=180)
		baghitground(bag);
	  else
		if ((dig.Monster.getfield(h,v+1)&0xfdf)==0xfdf)
		  if (yr==0)
			baghitground(bag);
	  dig.Monster.checkmonscared(bagdat[bag].h);
  }
  if (bagdat[bag].dir!=-1)
	if (bagdat[bag].dir!=6 && pushcount!=0)
	  pushcount--;
	else
	  pushbag(bag,bagdat[bag].dir);
}


return {

setdg: setdg,
bagbits: bagbits,
baghitground: baghitground,
bagy: bagy,
cleanupbags: cleanupbags,
dobags: dobags,
drawbags: drawbags,
getbagdir: getbagdir,
getgold: getgold,
getnmovingbags: getnmovingbags,
initbags: initbags,
pushbag: pushbag,
pushbags: pushbags,
pushudbags: pushudbags,
removebag: removebag,
removebags: removebags,
updatebag: updatebag

};

};



function DDrawing(_d) {

var dig = _d;
	
var field1 = [	// [150]
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ];

var field2 = [	// [150]
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ];

var field = [	// [150]
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ];

var diggerbuf = new Array(480),	// short
  bagbuf1 = new Array(480),
  bagbuf2 = new Array(480),
  bagbuf3 = new Array(480),
  bagbuf4 = new Array(480),
  bagbuf5 = new Array(480),
  bagbuf6 = new Array(480),
  bagbuf7 = new Array(480),
  monbuf1 = new Array(480),
  monbuf2 = new Array(480),
  monbuf3 = new Array(480),
  monbuf4 = new Array(480),
  monbuf5 = new Array(480),
  monbuf6 = new Array(480),
  bonusbuf = new Array(480),
  firebuf = new Array(128);

var bitmasks = [0xfffe,0xfffd,0xfffb,0xfff7,0xffef,0xffdf,0xffbf,0xff7f,0xfeff,0xfdff,0xfbff,0xf7ff ];	// [12]

var monspr = [0,0,0,0,0,0];	// [6]
var monspd = [0,0,0,0,0,0];	// [6]

var digspr=0,digspd=0,firespr=0,fireheight=8;

function setdg(_d) { 
  dig = _d;
}
function createdbfspr () {
  digspd=1;
  digspr=0;
  firespr=0;
  dig.Sprite.createspr(0,0,diggerbuf,4,15,0,0);
  dig.Sprite.createspr(14,81,bonusbuf,4,15,0,0);
  dig.Sprite.createspr(15,82,firebuf,2,fireheight,0,0);
}
function creatembspr () {
  var i;
  dig.Sprite.createspr(1,62,bagbuf1,4,15,0,0);
  dig.Sprite.createspr(2,62,bagbuf2,4,15,0,0);
  dig.Sprite.createspr(3,62,bagbuf3,4,15,0,0);
  dig.Sprite.createspr(4,62,bagbuf4,4,15,0,0);
  dig.Sprite.createspr(5,62,bagbuf5,4,15,0,0);
  dig.Sprite.createspr(6,62,bagbuf6,4,15,0,0);
  dig.Sprite.createspr(7,62,bagbuf7,4,15,0,0);
  dig.Sprite.createspr(8,71,monbuf1,4,15,0,0);
  dig.Sprite.createspr(9,71,monbuf2,4,15,0,0);
  dig.Sprite.createspr(10,71,monbuf3,4,15,0,0);
  dig.Sprite.createspr(11,71,monbuf4,4,15,0,0);
  dig.Sprite.createspr(12,71,monbuf5,4,15,0,0);
  dig.Sprite.createspr(13,71,monbuf6,4,15,0,0);
  createdbfspr();
  for (i=0;i<6;i++) {
	monspr[i]=0;
	monspd[i]=1;
  }
}
function drawbackg(l) {
  var x,y;
  for (y=14;y<200;y+=4)
	for (x=0;x<320;x+=20)
	  dig.Sprite.drawmiscspr(x,y,93+l,5,4);
}
function drawbonus(x,y) {
  dig.Sprite.initspr(14,81,4,15,0,0);
  dig.Sprite.movedrawspr(14,x,y);
}
function drawbottomblob(x,y) {
  dig.Sprite.initmiscspr(x-4,y+15,6,6);
  dig.Sprite.drawmiscspr(x-4,y+15,105,6,6);
  dig.Sprite.getis();
}
function drawdigger(t,x,y,f) {	// r: int
  digspr+=digspd;
  if (digspr==2 || digspr==0)
	digspd=-digspd;
  if (digspr>2)
	digspr=2;
  if (digspr<0)
	digspr=0;
  if (t>=0 && t<=6 && !((t&1)!=0)) {
	dig.Sprite.initspr(0,(t+(f ? 0 : 1))*3+digspr+1,4,15,0,0);
	return dig.Sprite.drawspr(0,x,y);
  }
  if (t>=10 && t<=15) {
	dig.Sprite.initspr(0,40-t,4,15,0,0);
	return dig.Sprite.drawspr(0,x,y);
  }
  return 0;
}
function drawemerald(x,y) {
  dig.Sprite.initmiscspr(x,y,4,10);
  dig.Sprite.drawmiscspr(x,y,108,4,10);
  dig.Sprite.getis();
}
function drawfield () {
  var x,y,xp,yp;
  for (x=0;x<15;x++)
	for (y=0;y<10;y++)
	  if ((field[y*15+x]&0x2000)==0) {
		xp=x*20+12;
		yp=y*18+18;
		if ((field[y*15+x]&0xfc0)!=0xfc0) {
		  field[y*15+x]&=0xd03f;
		  drawbottomblob(xp,yp-15);
		  drawbottomblob(xp,yp-12);
		  drawbottomblob(xp,yp-9);
		  drawbottomblob(xp,yp-6);
		  drawbottomblob(xp,yp-3);
		  drawtopblob(xp,yp+3);
		}
		if ((field[y*15+x]&0x1f)!=0x1f) {
		  field[y*15+x]&=0xdfe0;
		  drawrightblob(xp-16,yp);
		  drawrightblob(xp-12,yp);
		  drawrightblob(xp-8,yp);
		  drawrightblob(xp-4,yp);
		  drawleftblob(xp+4,yp);
		}
		if (x<14)
		  if ((field[y*15+x+1]&0xfdf)!=0xfdf)
			drawrightblob(xp,yp);
		if (y<9)
		  if ((field[(y+1)*15+x]&0xfdf)!=0xfdf)
			drawbottomblob(xp,yp);
	  }
}
function drawfire(x,y,t) {
  if (t==0) {
	firespr++;
	if (firespr>2)
	  firespr=0;
	dig.Sprite.initspr(15,82+firespr,2,fireheight,0,0);
  }
  else
	dig.Sprite.initspr(15,84+t,2,fireheight,0,0);
  return dig.Sprite.drawspr(15,x,y);
}
function drawfurryblob(x,y) {
  dig.Sprite.initmiscspr(x-4,y+15,6,8);
  dig.Sprite.drawmiscspr(x-4,y+15,107,6,8);
  dig.Sprite.getis();
}
function drawgold(n,t,x,y) {
  dig.Sprite.initspr(n,t+62,4,15,0,0);
  return dig.Sprite.drawspr(n,x,y);
}
function drawleftblob(x,y) {
  dig.Sprite.initmiscspr(x-8,y-1,2,18);
  dig.Sprite.drawmiscspr(x-8,y-1,104,2,18);
  dig.Sprite.getis();
}
function drawlife(t,x,y) {
  dig.Sprite.drawmiscspr(x,y,t+110,4,12);
}
function drawlives () {
  var l,n;
  n=dig.Main.getlives(1)-1;
  for (l=1;l<5;l++) {
	drawlife(n>0 ? 0 : 2,l*20+60,0);
	n--;
  }
  if (dig.Main.getnplayers()==2) {
	n=dig.Main.getlives(2)-1;
	for (l=1;l<5;l++) {
	  drawlife(n>0 ? 1 : 2,244-l*20,0);
	  n--;
	}
  }
}
function drawmon(n,nobf,dir,x,y) {
  monspr[n]+=monspd[n];
  if (monspr[n]==2 || monspr[n]==0)
	monspd[n]=-monspd[n];
  if (monspr[n]>2)
	monspr[n]=2;
  if (monspr[n]<0)
	monspr[n]=0;
  if (nobf)
	dig.Sprite.initspr(n+8,monspr[n]+69,4,15,0,0);
  else
	switch (dir) {
	  case 0:
		dig.Sprite.initspr(n+8,monspr[n]+73,4,15,0,0);
		break;
	  case 4:
		dig.Sprite.initspr(n+8,monspr[n]+77,4,15,0,0);
	}
  return dig.Sprite.drawspr(n+8,x,y);
}
function drawmondie(n,nobf,dir,x,y) {
  if (nobf)
	dig.Sprite.initspr(n+8,72,4,15,0,0);
  else
	switch(dir) {
	  case 0:
		dig.Sprite.initspr(n+8,76,4,15,0,0);
		break;
	  case 4:
		dig.Sprite.initspr(n+8,80,4,14,0,0);
	}
  return dig.Sprite.drawspr(n+8,x,y);
}
function drawrightblob(x,y) {
  dig.Sprite.initmiscspr(x+16,y-1,2,18);
  dig.Sprite.drawmiscspr(x+16,y-1,102,2,18);
  dig.Sprite.getis();
}
function drawsquareblob(x,y) {
  dig.Sprite.initmiscspr(x-4,y+17,6,6);
  dig.Sprite.drawmiscspr(x-4,y+17,106,6,6);
  dig.Sprite.getis();
}
function drawstatics () {
  var x,y;
  for (x=0;x<15;x++)
	for (y=0;y<10;y++)
	  if (dig.Main.getcplayer()==0)
		field[y*15+x]=field1[y*15+x];
	  else
		field[y*15+x]=field2[y*15+x];
  dig.Sprite.setretr(true);
  dig.Pc.gpal(0);
  dig.Pc.ginten(0);
  drawbackg(dig.Main.levplan());
  drawfield();
}
function drawtopblob(x,y) {
  dig.Sprite.initmiscspr(x-4,y-6,6,6);
  dig.Sprite.drawmiscspr(x-4,y-6,103,6,6);
  dig.Sprite.getis();
}
function eatfield(x,y,dir) {
  var h=Math.floor((x-12)/20),xr=Math.floor(((x-12)%20)/4),v=Math.floor((y-18)/18),yr=Math.floor(((y-18)%18)/3);
  dig.Main.incpenalty();
  switch (dir) {
	case 0:
	  h++;
	  field[v*15+h]&=bitmasks[xr];
	  if ((field[v*15+h]&0x1f)!=0)
		break;
	  field[v*15+h]&=0xdfff;
	  break;
	case 4:
	  xr--;
	  if (xr<0) {
		xr+=5;
		h--;
	  }
	  field[v*15+h]&=bitmasks[xr];
	  if ((field[v*15+h]&0x1f)!=0)
		break;
	  field[v*15+h]&=0xdfff;
	  break;
	case 2:
	  yr--;
	  if (yr<0) {
		yr+=6;
		v--;
	  }
	  field[v*15+h]&=bitmasks[6+yr];
	  if ((field[v*15+h]&0xfc0)!=0)
		break;
	  field[v*15+h]&=0xdfff;
	  break;
	case 6:
	  v++;
	  field[v*15+h]&=bitmasks[6+yr];
	  if ((field[v*15+h]&0xfc0)!=0)
		break;
	  field[v*15+h]&=0xdfff;
  }
}
function eraseemerald(x,y) {
  dig.Sprite.initmiscspr(x,y,4,10);
  dig.Sprite.drawmiscspr(x,y,109,4,10);
  dig.Sprite.getis();
}
function initdbfspr () {
  digspd=1;
  digspr=0;
  firespr=0;
  dig.Sprite.initspr(0,0,4,15,0,0);
  dig.Sprite.initspr(14,81,4,15,0,0);
  dig.Sprite.initspr(15,82,2,fireheight,0,0);
}
function initmbspr () {
  dig.Sprite.initspr(1,62,4,15,0,0);
  dig.Sprite.initspr(2,62,4,15,0,0);
  dig.Sprite.initspr(3,62,4,15,0,0);
  dig.Sprite.initspr(4,62,4,15,0,0);
  dig.Sprite.initspr(5,62,4,15,0,0);
  dig.Sprite.initspr(6,62,4,15,0,0);
  dig.Sprite.initspr(7,62,4,15,0,0);
  dig.Sprite.initspr(8,71,4,15,0,0);
  dig.Sprite.initspr(9,71,4,15,0,0);
  dig.Sprite.initspr(10,71,4,15,0,0);
  dig.Sprite.initspr(11,71,4,15,0,0);
  dig.Sprite.initspr(12,71,4,15,0,0);
  dig.Sprite.initspr(13,71,4,15,0,0);
  initdbfspr();
}
function makefield () {
  var c,x,y;
  for (x=0;x<15;x++)
	for (y=0;y<10;y++) {
	  field[y*15+x]=-1;
	  c=dig.Main.getlevch(x,y,dig.Main.levplan());
	  if (c=='S' || c=='V')
		field[y*15+x]&=0xd03f;
	  if (c=='S' || c=='H')
		field[y*15+x]&=0xdfe0;
	  if (dig.Main.getcplayer()==0)
		field1[y*15+x]=field[y*15+x];
	  else
		field2[y*15+x]=field[y*15+x];
	}
}
function outtext (p,x,y,c) {
	outtext (p,x,y,c,false);
}
function outtext (p, x, y, c, b) {
  var i, rx = x;
  for (i=0;i<p.length;i++) {
	dig.Pc.gwrite(x,y,p.charAt (i),c);
	x+=12;
  }
}
function savefield () {
  var x,y;
  for (x=0;x<15;x++)
	for (y=0;y<10;y++)
	  if (dig.Main.getcplayer()==0)
		field1[y*15+x]=field[y*15+x];
	  else
		field2[y*15+x]=field[y*15+x];
}

return {

setdg: setdg,
createdbfspr: createdbfspr,
creatembspr: creatembspr,
drawbackg: drawbackg,
drawbonus: drawbonus,
drawbottomblob: drawbottomblob,
drawdigger: drawdigger,
drawemerald: drawemerald,
drawfield: drawfield,
drawfire: drawfire,
drawfurryblob: drawfurryblob,
drawgold: drawgold,
drawleftblob: drawleftblob,
drawlife: drawlife,
drawlives: drawlives,
drawmon: drawmon,
drawmondie: drawmondie,
drawrightblob: drawrightblob,
drawsquareblob: drawsquareblob,
drawstatics: drawstatics,
drawtopblob: drawtopblob,
eatfield: eatfield,
eraseemerald: eraseemerald,
initdbfspr: initdbfspr,
initmbspr: initmbspr,
makefield: makefield,
outtext: outtext,
outtext: outtext,
savefield: savefield,

field: field

};

}

function DInput(_d) {

var dig = _d;
	
var leftpressed=false,rightpressed=false,uppressed=false,downpressed=false,f1pressed=false,firepressed=false,minuspressed,pluspressed,f10pressed,escape=false;

var keypressed=0;

var akeypressed;
var dynamicdir=-1,staticdir=-1,joyx=0,joyy=0;

var joybut1=false,joybut2=false;

var keydir=0,jleftthresh=0,jupthresh=0,jrightthresh=0,jdownthresh=0,joyanax=0,joyanay=0;
var firepflag=false;

var joyflag=false;

function setdg(_d) { 
  dig = _d;
}

function checkkeyb () {
/*	if (pluspressed) {
		if (dig.frametime>Digger.MIN_RATE)
			dig.frametime -= 5;
	}
	if (minuspressed) {
		if (dig.frametime<Digger.MAX_RATE)
			dig.frametime += 5;
	}
*/
	if (f10pressed)
		escape=true;

/*  while (kbhit()) {
	akeypressed=getkey();
	switch (akeypressed) {
	  case 321: // F7
		musicflag=!musicflag;
		break;
	  case 323: // F9
		soundflag=!soundflag;
		break;
	  case 324: // F10
		escape=true;
	}
  } */
}
function detectjoy () {
  joyflag=false;
  staticdir=dynamicdir=-1;
}
function getasciikey (make) {
  var k;
  if ((make==' ') || ((make>='a') && (make<='z')) || ((make>='0') && (make<='9')))
  	return make;
  else
  	return 0;
/*  if (make<2 || make>=58)
	return 0; 
  if (kbhit())
	k=getkey();
  else
	return 0;
  if (k>='a' && k<='A')
	k+='A'-'a'; */
}
function getdir () {
  var bp2=keydir;
/*  if (joyflag) {
	bp2=-1;
	if (joyx<jleftthresh)
	  bp2=4;
	if (joyx>jrightthresh)
	  bp2=0;
	if (joyx>=jleftthresh && joyx<=jrightthresh) {
	  if (joyy<jupthresh)
		bp2=2;
	  if (joyy>jdownthresh)
		bp2=6;
	}
  } */
  return bp2;
}
function initkeyb () {
}
function Key_downpressed () {
  downpressed=true;
  dynamicdir=staticdir=6;
}
function Key_downreleased () {
  downpressed=false;
  if (dynamicdir==6)
	setdirec();
}
function Key_f1pressed () {
  firepressed=true;
  f1pressed=true;
}
function Key_f1released () {
  f1pressed=false;
}
function Key_leftpressed () {
  leftpressed=true;
  dynamicdir=staticdir=4;
}
function Key_leftreleased () {
  leftpressed=false;
  if (dynamicdir==4)
	setdirec();
}
function Key_rightpressed () {
  rightpressed=true;
  dynamicdir=staticdir=0;
}
function Key_rightreleased () {
  rightpressed=false;
  if (dynamicdir==0)
	setdirec();
}
function Key_uppressed () {
  uppressed=true;
  dynamicdir=staticdir=2;
}
function Key_upreleased () {
  uppressed=false;
  if (dynamicdir==2)
	setdirec();
}

function processkey (key) {
  keypressed=key;
	if (key>0x80)
		akeypressed = key&0x7f;
  switch (key) {

	case 0x4b: Key_leftpressed(); break;
	case 0xcb: Key_leftreleased(); break;
	case 0x4d: Key_rightpressed(); break;
	case 0xcd: Key_rightreleased(); break;
	case 0x48: Key_uppressed(); break;
	case 0xc8: Key_upreleased(); break;
	case 0x50: Key_downpressed(); break;
	case 0xd0: Key_downreleased(); break;

	case 0x3b: Key_f1pressed(); break;
	case 0xbb: Key_f1released(); break;

	case 0x78: f10pressed=true; break;
	case 0xf8: f10pressed=false; break;

	case 0x2b: pluspressed=true; break;
	case 0xab: pluspressed=false; break;

	case 0x2d: minuspressed=true; break;
	case 0xad: minuspressed=false; break;

  }
}
function readdir () {
/*  int j; */
  keydir=staticdir;
  if (dynamicdir!=-1)
	keydir=dynamicdir;
  staticdir=-1;
  if (f1pressed || firepressed)
	firepflag=true;
  else
	firepflag=false;
  firepressed=false;
/*  if (joyflag) {
	incpenalty();
	incpenalty();
	joyanay=0;
	joyanax=0;
	for (j=0;j<4;j++) {
	  readjoy();
	  joyanax+=joyx;
	  joyanay+=joyy;
	}
	joyx=joyanax>>2;
	joyy=joyanay>>2;
	if (joybut1)
	  firepflag=true;
	else
	  firepflag=false;
  } */
}
function readjoy () {
}
function setdirec () {
  dynamicdir=-1;
  if (uppressed) dynamicdir=staticdir=2;
  if (downpressed) dynamicdir=staticdir=6;
  if (leftpressed) dynamicdir=staticdir=4;
  if (rightpressed) dynamicdir=staticdir=0;
}
function teststart () {
/*  int j; */
  var startf=false;
/*  if (joyflag) {
	readjoy();
	if (joybut1)
	  startf=true;
  }  */
  if (keypressed!=0 && (keypressed&0x80)==0 && keypressed!=27) {
	startf=true;
	joyflag=false;
	keypressed=0;
  }
  if (!startf)
	return false;
/*  if (joyflag) {
	joyanay=0;
	joyanax=0;
	for (j=0;j<50;j++) {
	  readjoy();
	  joyanax+=joyx;
	  joyanay+=joyy;
	}
	joyx=joyanax/50;
	joyy=joyanay/50;
	jleftthresh=joyx-35;
	if (jleftthresh<0)
	  jleftthresh=0;
	jleftthresh+=10;
	jupthresh=joyy-35;
	if (jupthresh<0)
	  jupthresh=0;
	jupthresh+=10;
	jrightthresh=joyx+35;
	if (jrightthresh>255)
	  jrightthresh=255;
	jrightthresh-=10;
	jdownthresh=joyy+35;
	if (jdownthresh>255)
	  jdownthresh=255;
	jdownthresh-=10;
	joyanax=joyx;
	joyanay=joyy;
  } */
  return true;
}
function getfirepflag() {
  return firepflag;
}

return {

setdg: setdg,
checkkeyb: checkkeyb,
detectjoy: detectjoy,
getasciikey: getasciikey,
getdir: getdir,
initkeyb: initkeyb,
Key_downpressed: Key_downpressed,
Key_downreleased: Key_downreleased,
Key_f1pressed: Key_f1pressed,
Key_f1released: Key_f1released,
Key_leftpressed: Key_leftpressed,
Key_leftreleased: Key_leftreleased,
Key_rightpressed: Key_rightpressed,
Key_rightreleased: Key_rightreleased,
Key_uppressed: Key_uppressed,
Key_upreleased: Key_upreleased,
processkey: processkey,
readdir: readdir,
readjoy: readjoy,
setdirec: setdirec,
teststart: teststart,

getfirepflag: getfirepflag,
firepressed_w: function(x) { firepressed = x; },
keypressed_r: function() { return keypressed; },
keypressed_w: function(x) { keypressed = x; },
akeypressed_r: function() { return akeypressed; },
akeypressed_w: function(x) { akeypressed = x; },
escape_r: function() { return escape; }

};

}

function _game() {
  this.lives = this.level = 0;
  this.dead = this.levdone = false;
}


function DMain(_d) {

var dig = _d;

var digsprorder = [ 14,13,7,6,5,4,3,2,1,12,11,10,9,8,15,0 ];	// [16]

gamedat = [ new _game (), new _game () ];

var pldispbuf = "";

var curplayer=0,nplayers=0,penalty=0;
var levnotdrawn=false, flashplayer=false;

var levfflag=false;
var biosflag=false;
var speedmul=40;
var delaytime=0;

var randv;

var leveldat =		// [8][10][15]
[["S   B     HHHHS",
  "V  CC  C  V B  ",
  "VB CC  C  V    ",
  "V  CCB CB V CCC",
  "V  CC  C  V CCC",
  "HH CC  C  V CCC",
  " V    B B V    ",
  " HHHH     V    ",
  "C   V     V   C",
  "CC  HHHHHHH  CC"],
 ["SHHHHH  B B  HS",
  " CC  V       V ",
  " CC  V CCCCC V ",
  "BCCB V CCCCC V ",
  "CCCC V       V ",
  "CCCC V B  HHHH ",
  " CC  V CC V    ",
  " BB  VCCCCV CC ",
  "C    V CC V CC ",
  "CC   HHHHHH    "],
 ["SHHHHB B BHHHHS",
  "CC  V C C V BB ",
  "C   V C C V CC ",
  " BB V C C VCCCC",
  "CCCCV C C VCCCC",
  "CCCCHHHHHHH CC ",
  " CC  C V C  CC ",
  " CC  C V C     ",
  "C    C V C    C",
  "CC   C H C   CC"],
 ["SHBCCCCBCCCCBHS",
  "CV  CCCCCCC  VC",
  "CHHH CCCCC HHHC",
  "C  V  CCC  V  C",
  "   HHH C HHH   ",
  "  B  V B V  B  ",
  "  C  VCCCV  C  ",
  " CCC HHHHH CCC ",
  "CCCCC CVC CCCCC",
  "CCCCC CHC CCCCC"],
 ["SHHHHHHHHHHHHHS",
  "VBCCCCBVCCCCCCV",
  "VCCCCCCV CCBC V",
  "V CCCC VCCBCCCV",
  "VCCCCCCV CCCC V",
  "V CCCC VBCCCCCV",
  "VCCBCCCV CCCC V",
  "V CCBC VCCCCCCV",
  "VCCCCCCVCCCCCCV",
  "HHHHHHHHHHHHHHH"],
 ["SHHHHHHHHHHHHHS",
  "VCBCCV V VCCBCV",
  "VCCC VBVBV CCCV",
  "VCCCHH V HHCCCV",
  "VCC V CVC V CCV",
  "VCCHH CVC HHCCV",
  "VC V CCVCC V CV",
  "VCHHBCCVCCBHHCV",
  "VCVCCCCVCCCCVCV",
  "HHHHHHHHHHHHHHH"],
 ["SHCCCCCVCCCCCHS",
  " VCBCBCVCBCBCV ",
  "BVCCCCCVCCCCCVB",
  "CHHCCCCVCCCCHHC",
  "CCV CCCVCCC VCC",
  "CCHHHCCVCCHHHCC",
  "CCCCV CVC VCCCC",
  "CCCCHH V HHCCCC",
  "CCCCCV V VCCCCC",
  "CCCCCHHHHHCCCCC"],
 ["HHHHHHHHHHHHHHS",
  "V CCBCCCCCBCC V",
  "HHHCCCCBCCCCHHH",
  "VBV CCCCCCC VBV",
  "VCHHHCCCCCHHHCV",
  "VCCBV CCC VBCCV",
  "VCCCHHHCHHHCCCV",
  "VCCCC V V CCCCV",
  "VCCCCCV VCCCCCV",
  "HHHHHHHHHHHHHHH"]]; 

function setdg(_d) { 
  dig = _d;
}

function addlife(pl) {
  gamedat[pl-1].lives++;
  dig.Sound.sound1up();
}
function calibrate () {
/*  dig.Sound.setvolume(Math.floor(dig.Pc.getkips()/291));
  if (dig.Sound.getvolume()==0)
	dig.Sound.setvolume(1);
*/
}
function checklevdone () {
  if ((dig.countem()==0 || dig.Monster.monleft()==0) && dig.digonscr_r())
	gamedat[curplayer].levdone=true;
  else
	gamedat[curplayer].levdone=false;
}
function cleartopline () {
  dig.Drawing.outtext("                          ",0,0,3);
  dig.Drawing.outtext(" ",308,0,3);
}
function drawscreen () {
  dig.Drawing.creatembspr();
  dig.Drawing.drawstatics();
  dig.Bags.drawbags();
  dig.drawemeralds();
  dig.initdigger();
  dig.Monster.initmonsters();
}
function getnplayers() {
  return nplayers;
}
function getcplayer () {
  return curplayer;
}
function getlevch (x,y,l) {
	if (l==0)
		l++;
  return leveldat[l-1][y].charAt (x);
}
function getlives(pl) {
  return gamedat[pl-1].lives;
}
function incpenalty () {
  penalty++;
}
function initchars () {
  dig.Drawing.initmbspr();
  dig.initdigger();
  dig.Monster.initmonsters();
}
function initlevel () {
  gamedat[curplayer].levdone=false;
  dig.Drawing.makefield();
  dig.makeemfield();
  dig.Bags.initbags();
  levnotdrawn=true;
}
function levno () {
  return gamedat[curplayer].level;
}
function levof10 () {
  if (gamedat[curplayer].level>10)
	return 10;
  return gamedat[curplayer].level;
}
function levplan () {
  var l=levno();
  if (l>8)
	l=(l&3)+5; /* Level plan: 12345678, 678, (5678) 247 times, 5 forever */
  return l;
}
function main () {

  var frame,t,x = 0;
  var start;
  var intv;
  var INT = Math.floor(1000/13);

  randv=dig.Pc.gethrt();

  calibrate();
//  parsecmd(argc,argv);
  //dig.ftime=speedmul*2000;
  dig.Sprite.setretr(false);
  dig.Pc.ginit();
  dig.Sprite.setretr(true);
  dig.Pc.gpal(0);
  dig.Input.initkeyb();
  dig.Input.detectjoy ();
  dig.Scores.loadscores();

  dig.Sound.initsound();

  nplayers=1;

//  do {

  var part1 = function() {

	dig.Sound.soundstop();
	dig.Sprite.setsprorder(digsprorder);
	dig.Drawing.creatembspr();
	dig.Input.detectjoy();
	dig.Pc.gclear();
	dig.Pc.gtitle();
	dig.Drawing.outtext("D I G G E R",100,0,3);
	shownplayers();
	dig.Scores.showtable();
	start=false;
	frame=1;
	
dig.time_w(dig.Pc.gethrt ());

	intv = setInterval(function() { 

	if (!start) {
	  start=dig.Input.teststart();
	  if (dig.Input.akeypressed_r()==27) {  //	esc
		switchnplayers();
		shownplayers();
		dig.Input.akeypressed_w(0);
		dig.Input.keypressed_w(0);
	  }
	  if (frame==0)
		for (t=54;t<174;t+=12)
		  dig.Drawing.outtext("            ",164,t,0);
	  if (frame==50) {
		dig.Sprite.movedrawspr(8,292,63);
		x=292;
	  }
	  if (frame>50 && frame<=77) {
		x-=4;
		dig.Drawing.drawmon(0,true,4,x,63);
	  }
	  if (frame>77)
		dig.Drawing.drawmon(0,true,0,184,63);
	  if (frame==83)
		dig.Drawing.outtext("NOBBIN",216,64,2);
	  if (frame==90) {
		dig.Sprite.movedrawspr(9,292,82);
		dig.Drawing.drawmon(1,false,4,292,82);
		x=292;
	  }
	  if (frame>90 && frame<=117) {
		x-=4;
		dig.Drawing.drawmon(1,false,4,x,82);
	  }
	  if (frame>117)
		dig.Drawing.drawmon(1,false,0,184,82);
	  if (frame==123)
		dig.Drawing.outtext("HOBBIN",216,83,2);
	  if (frame==130) {
		dig.Sprite.movedrawspr(0,292,101);
		dig.Drawing.drawdigger(4,292,101,true);
		x=292;
	  }
	  if (frame>130 && frame<=157) {
		x-=4;
		dig.Drawing.drawdigger(4,x,101,true);
	  }
	  if (frame>157)
		dig.Drawing.drawdigger(0,184,101,true);
	  if (frame==163)
		dig.Drawing.outtext("DIGGER",216,102,2);
	  if (frame==178) {
		dig.Sprite.movedrawspr(1,184,120);
		dig.Drawing.drawgold(1,0,184,120);
	  }
	  if (frame==183)
		dig.Drawing.outtext("GOLD",216,121,2);
	  if (frame==198)
		dig.Drawing.drawemerald(184,141);
	  if (frame==203)
		dig.Drawing.outtext("EMERALD",216,140,2);
	  if (frame==218)
		dig.Drawing.drawbonus(184,158);
	  if (frame==223)
		dig.Drawing.outtext("BONUS",216,159,2);
	  dig.newframe();
	  frame++;
	  if (frame>250)
		frame=0;
	}
	else {
	    clearInterval(intv);
	    part2();
	}
	
	}, INT);

  };


  var part2 = function() {

	gamedat[0].level=1;
	gamedat[0].lives=3;
	if (nplayers==2) {
	  gamedat[1].level=1;
	  gamedat[1].lives=3;
	}
	else
	  gamedat[1].lives=0;
	dig.Pc.gclear();
	curplayer=0;
	initlevel();
	curplayer=1;
	initlevel();
	dig.Scores.zeroscores();
	dig.bonusvisible_w(true);
	if (nplayers==2)
	  flashplayer=true;
	curplayer=0;
//	if (dig.Input.escape_r())
//	  break;
//    if (recording)
//	  recputinit();

	part21();

  };


  var part21 = function() {
    if ((gamedat[0].lives!=0 || gamedat[1].lives!=0) && !dig.Input.escape_r()) {
      gamedat[curplayer].dead=false;
      part211();
    }
    else
      part1();
  };


  var part211 = function() {
	if (!gamedat[curplayer].dead && gamedat[curplayer].lives!=0 && !dig.Input.escape_r()) {
	   dig.Drawing.initmbspr();
	   part2111();
	}
	else
	  part21();
  };


  //play();


  var part2111 = function() { 

/*  if (playing)
        randv=recgetrand();
  else
        randv=getlrt();
  if (recording)
        recputrand(randv); */

  if (levnotdrawn) {
        levnotdrawn=false;
        drawscreen();
dig.time_w(dig.Pc.gethrt ());
        if (flashplayer) {
          flashplayer=false;
          pldispbuf = "PLAYER ";
          if (curplayer==0)
                pldispbuf += "1";
          else
                pldispbuf += "2";
          cleartopline();
          for (t=0;t<15;t++)
                for (c=1;c<=3;c++) {
                  dig.Drawing.outtext(pldispbuf,108,0,c);
                  dig.Scores.writecurscore(c);
                  /* olddelay(20); */
                  dig.newframe();
                  if (dig.Input.escape_r())
                        return;
                }
          dig.Scores.drawscores();
          dig.Scores.addscore(0);
        }
  }
  else
        initchars();

  dig.Input.keypressed_w(0);
  dig.Drawing.outtext("        ",108,0,3);
  dig.Scores.initscores();
  dig.Drawing.drawlives();
  dig.Sound.music(1);
  dig.Input.readdir();

dig.time_w(dig.Pc.gethrt ());

  intv = setInterval(function() { 

  if (!gamedat[curplayer].dead && !gamedat[curplayer].levdone && !dig.Input.escape_r()) {
        penalty=0;
        dig.dodigger();
        dig.Monster.domonsters();
        dig.Bags.dobags();
//  if (penalty<8)
//          for (t=(8-penalty)*5;t>0;t--)
//                olddelay(1);
        if (penalty>8)
          dig.Monster.incmont(penalty-8);
        testpause();
        checklevdone();
  }
  else {
    clearInterval(intv);
    part2112();
  }

  }, INT);

  };  // part2111


  var part2112 = function() {

  dig.erasedigger();
  dig.Sound.musicoff();
  t=20;

  intv = setInterval(function() {

  if ((dig.Bags.getnmovingbags()!=0 || t!=0) && !dig.Input.escape_r()) {
        if (t!=0)
          t--;
        penalty=0;
        dig.Bags.dobags();
        dig.dodigger();
        dig.Monster.domonsters();
        if (penalty<8)
/*    for (t=(8-penalty)*5;t>0;t--)
                 olddelay(1); */
          t=0;
  }
  else { 
    clearInterval(intv);
    part2113();
  }

  }, INT);

  };


  var part2113 = function() {

  //dig.Sound.soundstop();	// last emerald
  dig.killfire();
  dig.erasebonus();
  dig.Bags.cleanupbags();
  dig.Drawing.savefield();
  dig.Monster.erasemonsters();
dig.newframe ();                // needed by Java version!!

//  if (gamedat[curplayer].levdone)
//        dig.Sound.soundlevdone();

  if (!gamedat[curplayer].levdone) {
    part2114();
    return;
  }

  //dig.Sound.soundlevdone();	// preloop

  t = 12;
  intv = setInterval(function() {

  if (t >0) { //dig.Sound.soundlevdoneloop()) {
    t--;
  }
  else {
    //dig.Sound.soundlevdoneoff();
    dig.Sound.soundstop();
    clearInterval(intv);
    part2114();
  }

  }, INT); 

  } // part2113


  var part2114 = function() {

  if (dig.countem()==0) {
        gamedat[curplayer].level++;
        if (gamedat[curplayer].level>1000)
          gamedat[curplayer].level=1000;
        initlevel();
  }
  if (gamedat[curplayer].dead) {
        gamedat[curplayer].lives--;
        dig.Drawing.drawlives();
        if (gamedat[curplayer].lives==0 && !dig.Input.escape_r())
          dig.Scores.endofgame();
  }
  if (gamedat[curplayer].levdone) {
        gamedat[curplayer].level++;
        if (gamedat[curplayer].level>1000)
          gamedat[curplayer].level=1000;
        initlevel();
  }

  part22();

  };


  var part22 = function() {
    if (gamedat[1-curplayer].lives!=0) {
	curplayer=1-curplayer;
	flashplayer=levnotdrawn=true;
    }
    part21();
  };


	//dig.Input.escape_w(false);

//  } while (!false); //dig.Input.escape_r());

    part1();

  dig.Sound.soundoff();
//  restorekeyb();
//  graphicsoff();
}

function play () {

  var t,c;

/*  if (playing)
	randv=recgetrand();
  else
	randv=getlrt();
  if (recording)
	recputrand(randv); */

  if (levnotdrawn) {
	levnotdrawn=false;
	drawscreen();
dig.time_w(dig.Pc.gethrt ());
	if (flashplayer) {
	  flashplayer=false;
	  pldispbuf = "PLAYER ";
	  if (curplayer==0)
	  	pldispbuf += "1";
	  else
	  	pldispbuf += "2";
	  cleartopline();
	  for (t=0;t<15;t++)
		for (c=1;c<=3;c++) {
		  dig.Drawing.outtext(pldispbuf,108,0,c);
		  dig.Scores.writecurscore(c);
		  /* olddelay(20); */
		  dig.newframe();
		  if (dig.Input.escape_r())
			return;
		}
	  dig.Scores.drawscores();
	  dig.Scores.addscore(0);
	}
  }
  else
	initchars();

  dig.Input.keypressed_w(0);
  dig.Drawing.outtext("        ",108,0,3);
  dig.Scores.initscores();
  dig.Drawing.drawlives();
  dig.Sound.music(1);
  dig.Input.readdir();
dig.time_w(dig.Pc.gethrt ()); 
  while (!gamedat[curplayer].dead && !gamedat[curplayer].levdone && !dig.Input.escape_r()) {
	penalty=0;
	dig.dodigger();
	dig.Monster.domonsters();
	dig.Bags.dobags();
/*  if (penalty<8)
	  for (t=(8-penalty)*5;t>0;t--)
		olddelay(1); */
	if (penalty>8)
	  dig.Monster.incmont(penalty-8);
	testpause();
	checklevdone();
  }
  dig.erasedigger();
  dig.Sound.musicoff();
  t=20;
  while ((dig.Bags.getnmovingbags()!=0 || t!=0) && !dig.Input.escape_r()) {
	if (t!=0)
	  t--;
	penalty=0;
	dig.Bags.dobags();
	dig.dodigger();
	dig.Monster.domonsters();
	if (penalty<8)
/*    for (t=(8-penalty)*5;t>0;t--)
		 olddelay(1); */
	  t=0;
  }
  dig.Sound.soundstop();
  dig.killfire();
  dig.erasebonus();
  dig.Bags.cleanupbags();
  dig.Drawing.savefield();
  dig.Monster.erasemonsters();
dig.newframe ();		// needed by Java version!!
  if (gamedat[curplayer].levdone)
	dig.Sound.soundlevdone();
  if (dig.countem()==0) {
	gamedat[curplayer].level++;
	if (gamedat[curplayer].level>1000)
	  gamedat[curplayer].level=1000;
	initlevel();
  }
  if (gamedat[curplayer].dead) {
	gamedat[curplayer].lives--;
	dig.Drawing.drawlives();
	if (gamedat[curplayer].lives==0 && !dig.Input.escape_r())
	  dig.Scores.endofgame();
  }
  if (gamedat[curplayer].levdone) {
	gamedat[curplayer].level++;
	if (gamedat[curplayer].level>1000)
	  gamedat[curplayer].level=1000;
	initlevel();
  }
}
function randno(n) {
  randv=(randv*0x15a4e35+1)&0x7fffffff;
  return (randv&0x7fffffff)%n;
}
function setdead(bp6) {
  gamedat[curplayer].dead=bp6;
}
function shownplayers () {
  if (nplayers==1) {
	dig.Drawing.outtext("ONE",220,25,3);
	dig.Drawing.outtext(" PLAYER ",192,39,3);
  }
  else {
	dig.Drawing.outtext("TWO",220,25,3);
	dig.Drawing.outtext(" PLAYERS",184,39,3);
  }
}
function switchnplayers () {
  nplayers=3-nplayers;
}
function testpause () {
  if (dig.Input.akeypressed_r()==32) { /* Space bar */
	dig.Input.akeypressed_w(0);
	dig.Sound.soundpause();
	dig.Sound.sett2val(40);
	dig.Sound.setsoundt2();
	cleartopline();
	dig.Drawing.outtext("PRESS ANY KEY",80,0,1);
dig.newframe ();
	dig.Input.keypressed_w(0);
	while (true) {
/*		try {
			Thread.sleep (50);
		}
		catch (Exception e) {
		}
*/
		if (dig.Input.keypressed_r()!=0)
			break;
	}
	cleartopline();
	dig.Scores.drawscores();
	dig.Scores.addscore(0);
	dig.Drawing.drawlives();
dig.newframe ();
dig.time_w(dig.Pc.gethrt ()-dig.frametime);
//	olddelay(200);
	dig.Input.keypressed_w(0);
  }
  else
	dig.Sound.soundpauseoff();
}

return {

setdg: setdg,
addlife: addlife,
calibrate: calibrate,
checklevdone: checklevdone,
cleartopline: cleartopline,
drawscreen: drawscreen,
getcplayer: getcplayer,
getlevch: getlevch,
getlives: getlives,
incpenalty: incpenalty,
initchars: initchars,
initlevel: initlevel,
levno: levno,
levof10: levof10,
levplan: levplan,
main: main,
play: play,
randno: randno,
setdead: setdead,
shownplayers: shownplayers,
switchnplayers: switchnplayers,
testpause: testpause,
getnplayers: getnplayers


};

}

function _monster() {
  this.x = this.y = this.h = this.v = this.xr = this.yr = this.dir = this.hdir = this.t = this.hnt = this.death = this.bag = this.dtime = this.stime;
  this.flag = this.nob = this.alive = false;
}


function DMonster(_d) {

var dig = _d;
	
var mondat = [ new _monster (), new _monster (), new _monster (), new _monster (), new _monster (), new _monster () ];	// [6]

var nextmonster=0,totalmonsters=0,maxmononscr=0,nextmontime=0,mongaptime=0;

var unbonusflag=false, mongotgold=false;

function setdg(_d) { 
  dig = _d;
}

function checkcoincide (mon,bits) {
  var m,b;
  for (m=0,b=256;m<6;m++,b<<=1)
	if (((bits&b)!=0) && (mondat[mon].dir==mondat[m].dir) && (mondat[m].stime==0) && (mondat[mon].stime==0))
	  mondat[m].dir=dig.reversedir(mondat[m].dir);
}
function checkmonscared (h) {
  var m;
  for (m=0;m<6;m++)
	if ((h==mondat[m].h) && (mondat[m].dir==2))
	  mondat[m].dir=6;
}
function createmonster () {
  var i;
  for (i=0;i<6;i++)
	if (!mondat[i].flag) {
	  mondat[i].flag=true;
	  mondat[i].alive=true;
	  mondat[i].t=0;
	  mondat[i].nob=true;
	  mondat[i].hnt=0;
	  mondat[i].h=14;
	  mondat[i].v=0;
	  mondat[i].x=292;
	  mondat[i].y=18;
	  mondat[i].xr=0;
	  mondat[i].yr=0;
	  mondat[i].dir=4;
	  mondat[i].hdir=4;
	  nextmonster++;
	  nextmontime=mongaptime;
	  mondat[i].stime=5;
	  dig.Sprite.movedrawspr(i+8,mondat[i].x,mondat[i].y);
	  break;
	}
}
function domonsters () {
  var i;
  if (nextmontime>0)
	nextmontime--;
  else {
	if (nextmonster<totalmonsters && nmononscr()<maxmononscr && dig.digonscr_r() &&
		!dig.bonusmode_r())
	  createmonster();
	if (unbonusflag && nextmonster==totalmonsters && nextmontime==0)
	  if (dig.digonscr_r()) {
		unbonusflag=false;
		dig.createbonus();
	  }
  }
  for (i=0;i<6;i++)
	if (mondat[i].flag) {
	  if (mondat[i].hnt>10-dig.Main.levof10()) {
		if (mondat[i].nob) {
		  mondat[i].nob=false;
		  mondat[i].hnt=0;
		}
	  }
	  if (mondat[i].alive)
		if (mondat[i].t==0) {
		  monai(i);
		  if (dig.Main.randno(15-dig.Main.levof10())==0 && mondat[i].nob)
			monai(i);
		}
		else
		  mondat[i].t--;
	  else
		mondie(i);
	}
}
function erasemonsters () {
  var i;
  for (i=0;i<6;i++)
	if (mondat[i].flag)
	  dig.Sprite.erasespr(i+8);
}
function fieldclear (dir,x,y) {
  switch (dir) {
	case 0:
	  if (x<14)
		if ((getfield(x+1,y)&0x2000)==0)
		  if ((getfield(x+1,y)&1)==0 || (getfield(x,y)&0x10)==0)
			return true;
	  break;
	case 4:
	  if (x>0)
		if ((getfield(x-1,y)&0x2000)==0)
		  if ((getfield(x-1,y)&0x10)==0 || (getfield(x,y)&1)==0)
			return true;
	  break;
	case 2:
	  if (y>0)
		if ((getfield(x,y-1)&0x2000)==0)
		  if ((getfield(x,y-1)&0x800)==0 || (getfield(x,y)&0x40)==0)
			return true;
	  break;
	case 6:
	  if (y<9)
		if ((getfield(x,y+1)&0x2000)==0)
		  if ((getfield(x,y+1)&0x40)==0 || (getfield(x,y)&0x800)==0)
			return true;
  }
  return false;
}
function getfield (x,y) {
  return dig.Drawing.field[y*15+x];
}
function incmont (n) {
  var m;
  if (n>6)
	n=6;
  for (m=1;m<n;m++)
	mondat[m].t++;
}
function incpenalties (bits) {
  var m,b;
  for (m=0,b=256;m<6;m++,b<<=1) {
	if ((bits&b)!=0)
	  dig.Main.incpenalty();
	b<<=1;
  }
}
function initmonsters () {
  var i;
  for (i=0;i<6;i++)
	mondat[i].flag=false;
  nextmonster=0;
  mongaptime=45-(dig.Main.levof10()<<1);
  totalmonsters=dig.Main.levof10()+5;
  switch (dig.Main.levof10()) {
	case 1:
	  maxmononscr=3;
	  break;
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
	case 7:
	  maxmononscr=4;
	  break;
	case 8:
	case 9:
	case 10:
	  maxmononscr=5;
  }
  nextmontime=10;
  unbonusflag=true;
}
function killmon (mon) {
  if (mondat[mon].flag) {
	mondat[mon].flag=mondat[mon].alive=false;
	dig.Sprite.erasespr(mon+8);
	if (dig.bonusmode_r())
	  totalmonsters++;
  }
}
function killmonsters (bits) {
  var m,b,n=0;
  for (m=0,b=256;m<6;m++,b<<=1)
	if ((bits&b)!=0) {
	  killmon(m);
	  n++;
	}
  return n;
}
function monai(mon) {
  var clbits,monox,monoy,dir,mdirp1,mdirp2,mdirp3,mdirp4,t;
  var push;
  monox=mondat[mon].x;
  monoy=mondat[mon].y;
  if (mondat[mon].xr==0 && mondat[mon].yr==0) {

	/* If we are here the monster needs to know which way to turn next. */

	/* Turn hobbin back into nobbin if it's had its time */

	if (mondat[mon].hnt>30+(dig.Main.levof10()<<1))
	  if (!mondat[mon].nob) {
		mondat[mon].hnt=0;
		mondat[mon].nob=true;
	  }

	/* Set up monster direction properties to chase dig */

	if (Math.abs(dig.diggery_r()-mondat[mon].y)>Math.abs(dig.diggerx_r()-mondat[mon].x)) {
	  if (dig.diggery_r()<mondat[mon].y) { mdirp1=2; mdirp4=6; }
							else { mdirp1=6; mdirp4=2; }
	  if (dig.diggerx_r()<mondat[mon].x) { mdirp2=4; mdirp3=0; }
							else { mdirp2=0; mdirp3=4; }
	}
	else {
	  if (dig.diggerx_r()<mondat[mon].x) { mdirp1=4; mdirp4=0; }
							else { mdirp1=0; mdirp4=4; }
	  if (dig.diggery_r()<mondat[mon].y) { mdirp2=2; mdirp3=6; }
							else { mdirp2=6; mdirp3=2; }
	}

	/* In bonus mode, run away from digger */

	if (dig.bonusmode_r()) {
	  t=mdirp1; mdirp1=mdirp4; mdirp4=t;
	  t=mdirp2; mdirp2=mdirp3; mdirp3=t;
	}

	/* Adjust priorities so that monsters don't reverse direction unless they
	   really have to */

	dir=dig.reversedir(mondat[mon].dir);
	if (dir==mdirp1) {
	  mdirp1=mdirp2;
	  mdirp2=mdirp3;
	  mdirp3=mdirp4;
	  mdirp4=dir;
	}
	if (dir==mdirp2) {
	  mdirp2=mdirp3;
	  mdirp3=mdirp4;
	  mdirp4=dir;
	}
	if (dir==mdirp3) {
	  mdirp3=mdirp4;
	  mdirp4=dir;
	}

	/* Introduce a randno element on levels <6 : occasionally swap p1 and p3 */

	if (dig.Main.randno(dig.Main.levof10()+5)==1 && dig.Main.levof10()<6) {
	  t=mdirp1;
	  mdirp1=mdirp3;
	  mdirp3=t;
	}

	/* Check field and find direction */

	if (fieldclear(mdirp1,mondat[mon].h,mondat[mon].v))
	  dir=mdirp1;
	else
	  if (fieldclear(mdirp2,mondat[mon].h,mondat[mon].v))
		dir=mdirp2;
	  else
		if (fieldclear(mdirp3,mondat[mon].h,mondat[mon].v))
		  dir=mdirp3;
		else
		  if (fieldclear(mdirp4,mondat[mon].h,mondat[mon].v))
			dir=mdirp4;

	/* Hobbins don't care about the field: they go where they want. */

	if (!mondat[mon].nob)
	  dir=mdirp1;

	/* Monsters take a time penalty for changing direction */

	if (mondat[mon].dir!=dir)
	  mondat[mon].t++;

	/* Save the new direction */

	mondat[mon].dir=dir;
  }

  /* If monster is about to go off edge of screen, stop it. */

  if ((mondat[mon].x==292 && mondat[mon].dir==0) ||
	  (mondat[mon].x==12 && mondat[mon].dir==4) ||
	  (mondat[mon].y==180 && mondat[mon].dir==6) ||
	  (mondat[mon].y==18 && mondat[mon].dir==2))
	mondat[mon].dir=-1;

  /* Change hdir for hobbin */

  if (mondat[mon].dir==4 || mondat[mon].dir==0)
	mondat[mon].hdir=mondat[mon].dir;

  /* Hobbins digger */

  if (!mondat[mon].nob)
	dig.Drawing.eatfield(mondat[mon].x,mondat[mon].y,mondat[mon].dir);

  /* (Draw new tunnels) and move monster */

  switch (mondat[mon].dir) {
	case 0:
	  if (!mondat[mon].nob)
		dig.Drawing.drawrightblob(mondat[mon].x,mondat[mon].y);
	  mondat[mon].x+=4;
	  break;
	case 4:
	  if (!mondat[mon].nob)
		dig.Drawing.drawleftblob(mondat[mon].x,mondat[mon].y);
	  mondat[mon].x-=4;
	  break;
	case 2:
	  if (!mondat[mon].nob)
		dig.Drawing.drawtopblob(mondat[mon].x,mondat[mon].y);
	  mondat[mon].y-=3;
	  break;
	case 6:
	  if (!mondat[mon].nob)
		dig.Drawing.drawbottomblob(mondat[mon].x,mondat[mon].y);
	  mondat[mon].y+=3;
	  break;
  }

  /* Hobbins can eat emeralds */

  if (!mondat[mon].nob)
		dig.hitemerald(Math.floor((mondat[mon].x-12)/20),Math.floor((mondat[mon].y-18)/18), (mondat[mon].x-12)%20,(mondat[mon].y-18)%18, mondat[mon].dir);

  /* If digger's gone, don't bother */

  if (!dig.digonscr_r()) {
	mondat[mon].x=monox;
	mondat[mon].y=monoy;
  }

  /* If monster's just started, don't move yet */

  if (mondat[mon].stime!=0) {
	mondat[mon].stime--;
	mondat[mon].x=monox;
	mondat[mon].y=monoy;
  }

  /* Increase time counter for hobbin */

  if (!mondat[mon].nob && mondat[mon].hnt<100)
	mondat[mon].hnt++;

  /* Draw monster */

  push=true;
  clbits=dig.Drawing.drawmon(mon,mondat[mon].nob,mondat[mon].hdir,mondat[mon].x, mondat[mon].y);
  dig.Main.incpenalty();

  /* Collision with another monster */

  if ((clbits&0x3f00)!=0) {
	mondat[mon].t++; /* Time penalty */
	checkcoincide(mon,clbits); /* Ensure both aren't moving in the same dir. */
	incpenalties(clbits);
  }

  /* Check for collision with bag */

  if ((clbits&dig.Bags.bagbits())!=0) {
	mondat[mon].t++; /* Time penalty */
	mongotgold=false;
	if (mondat[mon].dir==4 || mondat[mon].dir==0) { /* Horizontal push */
	  push=dig.Bags.pushbags(mondat[mon].dir,clbits);
	  mondat[mon].t++; /* Time penalty */
	}
	else
	  if (!dig.Bags.pushudbags(clbits)) /* Vertical push */
		push=false;
	if (mongotgold) /* No time penalty if monster eats gold */
	  mondat[mon].t=0;
	if (!mondat[mon].nob && mondat[mon].hnt>1)
	  dig.Bags.removebags(clbits); /* Hobbins eat bags */
  }

  /* Increase hobbin cross counter */

  if (mondat[mon].nob && ((clbits&0x3f00)!=0) && dig.digonscr_r())
	mondat[mon].hnt++;

  /* See if bags push monster back */

  if (!push) {
	mondat[mon].x=monox;
	mondat[mon].y=monoy;
	dig.Drawing.drawmon(mon,mondat[mon].nob,mondat[mon].hdir,mondat[mon].x,mondat[mon].y);
	dig.Main.incpenalty();
	if (mondat[mon].nob) /* The other way to create hobbin: stuck on h-bag */
	  mondat[mon].hnt++;
	if ((mondat[mon].dir==2 || mondat[mon].dir==6) && mondat[mon].nob)
	  mondat[mon].dir=dig.reversedir(mondat[mon].dir); /* If vertical, give up */
  }

  /* Collision with digger */

  if (((clbits&1)!=0) && dig.digonscr_r())
	if (dig.bonusmode_r()) {
	  killmon(mon);
	  dig.Scores.scoreeatm();
	  dig.Sound.soundeatm(); /* Collision in bonus mode */
	}
	else
	  dig.killdigger(3,0); /* Kill digger */

  /* Update co-ordinates */

  mondat[mon].h=Math.floor((mondat[mon].x-12)/20);
  mondat[mon].v=Math.floor((mondat[mon].y-18)/18);
  mondat[mon].xr=(mondat[mon].x-12)%20;
  mondat[mon].yr=(mondat[mon].y-18)%18;
}
function mondie (mon) {
  switch (mondat[mon].death) {
	case 1:
	  if (dig.Bags.bagy(mondat[mon].bag)+6>mondat[mon].y)
		mondat[mon].y=dig.Bags.bagy(mondat[mon].bag);
	  dig.Drawing.drawmondie(mon,mondat[mon].nob,mondat[mon].hdir,mondat[mon].x,mondat[mon].y);
	  dig.Main.incpenalty();
	  if (dig.Bags.getbagdir(mondat[mon].bag)==-1) {
		mondat[mon].dtime=1;
		mondat[mon].death=4;
	  }
	  break;
	case 4:
	  if (mondat[mon].dtime!=0)
		mondat[mon].dtime--;
	  else {
		killmon(mon);
		dig.Scores.scorekill();
	  }
  }
}
function mongold () {
  mongotgold=true;
}
function monleft () {
  return nmononscr()+totalmonsters-nextmonster;
}
function nmononscr () {
  var i,n=0;
  for (i=0;i<6;i++)
	if (mondat[i].flag)
	  n++;
  return n;
}
function squashmonster (mon,death,bag) {
  mondat[mon].alive=false;
  mondat[mon].death=death;
  mondat[mon].bag=bag;
}
function squashmonsters (bag,bits) {
  var m,b;
  for (m=0,b=256;m<6;m++,b<<=1)
	if ((bits&b)!=0)
	  if (mondat[m].y>=dig.Bags.bagy(bag))
		squashmonster(m,1,bag);
}

return {

setdg: setdg,
checkcoincide: checkcoincide,
checkmonscared: checkmonscared,
createmonster: createmonster,
domonsters: domonsters,
erasemonsters: erasemonsters,
fieldclear: fieldclear,
getfield: getfield,
incmont: incmont,
incpenalties: incpenalties,
initmonsters: initmonsters,
killmon: killmon,
killmonsters: killmonsters,
monai: monai,
mondie: mondie,
mongold: mongold,
monleft: monleft,
nmononscr: nmononscr,
squashmonster: squashmonster,
squashmonsters: squashmonsters

};

}

function DPc(_d) {

var dig = _d;


var width = 320, height = 200;

var pixels = new Array(65536/4);
var curpal = 0;

var pals = [

      [ [ 0, 0x00, 0xCC, 0xCC ],
        [ 0, 0xCC, 0x00, 0x74 ],
        [ 0, 0x00, 0x00, 0x00 ] ],

      [ [ 0, 0x64, 0xFF, 0xFF ],
        [ 0, 0xFF, 0x64, 0xFF ],
        [ 0, 0x64, 0x64, 0x64 ] ]   ];


function setdg(_d) { 
  dig = _d;
}

function gclear () {
	var lpix = dig.getgpix();
	for (var i=0,l=(width*height)>>2;i<l;i++)
		pixels[i] = 0;
	for (var i=0,l=width*height*4;i<l;) {
		lpix[i++] = 0;
		lpix[i++] = 0;
		lpix[i++] = 0;
		i++;
	}
}
function gethrt () {
	return Date.now();
}
function getkips () {
	return 0;		// phony
}
function ggeti (x, y, p, w, h) {

	var src = 0;
	var dest = (y*width + x)>>2;

	for (var i=0;i<h;i++) {
		var d = dest;
		for (var j=0;j<w;j++) {
			p[src++] = pixels[d++];
			if (src==p.length)
				return;
		}
		dest += width>>2;
	}

}
function ggetpix (x, y) {
	return pixels[(width*y + x)>>2];
}
function ginit () {
}
function ginten (inten) {
  if (curpal == inten&1)
    return;
  curpal = inten&1;
  var lpix = dig.getgpix(), pal = pals[curpal];
  for (var i=0,l=(width*height)>>2,d=0;i<l;i++) {
    var px = pixels[i];
    for (var k=0;k<4;k++) {
      lpix[d++] = pal[0][px&3];
      lpix[d++] = pal[1][px&3];
      lpix[d++] = pal[2][px&3];
      d++;
      px>>=2;
    }
  }

}
function gpal (pal) {
}
function gputi (x, y, p, w, h) {
	gputi (x, y, p, w, h, true);
}
function gputi (x, y, p, w, h, b) {

	var src = 0;
	var dest = (y*width + x)>>2;
	var lpix = dig.getgpix(), pal = pals[curpal];

	for (var i=0;i<h;i++) {
		var d = dest, ld = d<<4;
		for (var j=0;j<w;j++) {
			var px = p[src++];
			pixels[d++] = px;
			for (var k=0;k<4;k++,px>>=2) {
			   lpix[ld++] = pal[0][px&3];
			   lpix[ld++] = pal[1][px&3];
			   lpix[ld++] = pal[2][px&3];
			   ld++;
			}
			if (src==p.length)
				return;
		}
		dest += width>>2;
	}

}
function gputim (x, y, ch, w, h) {

	var spr = cgagrafx.cgatable[ch*2];
	var msk = cgagrafx.cgatable[ch*2+1];

	var src = 0;
	var dest = (y*width + x)>>2;
        var lpix = dig.getgpix(), pal = pals[curpal];

	for (var i=0;i<h;i++) {
		var d = dest, ld = dest<<4;
		for (var j=0;j<w;j++) {
			var px = spr[src];
			var mx = msk[src], ax = pixels[d];
			src++;

			if ((mx&3)==0) {
			  ax = (ax&~192) | (px&3)<<6;
			  lpix[ld+0+12] = pal[0][px&3];
			  lpix[ld+1+12] = pal[1][px&3];
			  lpix[ld+2+12] = pal[2][px&3];
			}
			px>>=2;
			if ((mx&(3<<2))==0) {
			  ax = (ax&~48) | (px&3)<<4;
			  lpix[ld+0+8] = pal[0][px&3];
			  lpix[ld+1+8] = pal[1][px&3];
			  lpix[ld+2+8] = pal[2][px&3];
			}
			px>>=2;
			if ((mx&(3<<4))==0) {
			  ax = (ax&~12) | (px&3)<<2;
			  lpix[ld+0+4] = pal[0][px&3];
			  lpix[ld+1+4] = pal[1][px&3];
			  lpix[ld+2+4] = pal[2][px&3];
			}
			px>>=2;
			if ((mx&(3<<6))==0) {
			  ax = (ax&~3) | (px&3);
			  lpix[ld+0] = pal[0][px&3];
			  lpix[ld+1] = pal[1][px&3];
			  lpix[ld+2] = pal[2][px&3];
			}

			pixels[d] = ax;

			d+= 1;
			ld += 16;
			if (src==spr.length || src==msk.length) {
				return;
			}
		}
		dest += width>>2;
	}

}
function gtitle () {

	var src = 0, dest = 0, ld = 0, plus = 0;
        var lpix = dig.getgpix(), pal = pals[curpal];

	while (true) {

		if (src>=cgagrafx.cgatitledat.length)
			break;

		var b = cgagrafx.cgatitledat[src++], l, c;

		if (b==0xfe) {
			l = cgagrafx.cgatitledat[src++];
			if (l==0)
				l=256;
			c = cgagrafx.cgatitledat[src++];
		}
		else {
			l = 1;
			c = b;
		}

		for (var i=0;i<l;i++) {
			var px = c, adst = 0;
			if (dest<32768)
				adst = Math.floor(dest/320)*640+dest%320;
			else
				adst = 320+(Math.floor((dest-32768)/320))*640+(dest-32768)%320;
			pixels[adst>>2] = (px>>6) | (px>>2)&12 | (px<<2)&48 | (px<<6)&192;
			for (var k=0,ld=(adst<<2)+12;k<4;k++,px>>=2,ld-=8) {
			  lpix[ld++] = pal[0][px&3];
			  lpix[ld++] = pal[1][px&3];
			  lpix[ld++] = pal[2][px&3];
			  ld++;
			}

			dest+=4;
			if (dest>=65535)
				break;
		}

		if (dest>=65535)
			break;

	}

}
function gwrite (x, y, ch, c) {
	gwrite (x, y, ch, c, false);
}
function gwrite (x, y, ch, c, upd) {
c &= 3;
	var dest = (y*width+x)>>2, ofs = 0, color = c|c<<2|c<<4|c<<6;
        var lpix = dig.getgpix(), pal = pals[curpal];

	ch=ch.charCodeAt(0) - 32;
	if ((ch<0) || (ch>0x5f))
		return;

	var chartab = alpha.ascii2cga[ch];

	if (chartab==null)
		return;

	for (var i=0;i<12;i++) {
		var d = dest;
		for (var j=0;j<3;j++) {
			var px = chartab[ofs++];
			pixels[d] = ((px>>6) | (px>>2)&12 | (px<<2)&48 | (px<<6)&192)&color;
			for (var k=0,ld=(d<<4)+12;k<4;k++,px>>=2,ld-=8) {
                           lpix[ld++] = pal[0][px&c];
                           lpix[ld++] = pal[1][px&c];
                           lpix[ld++] = pal[2][px&c];
                           ld++;
                        }
			d++;
		}
		dest += width>>2;
	}

}

return {

setdg: setdg,
gclear: gclear,
gethrt: gethrt,
getkips: getkips,
ggeti: ggeti,
ggetpix: ggetpix,
ginit: ginit,
ginten: ginten,
gpal: gpal,
gputi: gputi,
gputi: gputi,
gputim: gputim,
gtitle: gtitle,
gwrite: gwrite,

pixels: pixels

};

}


function DScores(_d) {

var dig = _d;

var highbuf = new Array(10);	// char
var scorehigh = [0,0,0,0,0,0,0,0,0,0,0,0];	// [12]
var scoreinit = new Array(11);	//string
var scoret=0,score1=0,score2=0,nextbs1=0,nextbs2=0;
var hsbuf; 
var scorebuf = new Array(512);	//char
var bonusscore=20000;
var gotinitflag=false;

function setdg(_d) { 
  dig = _d;
}

function addscore (score) {
  if (dig.Main.getcplayer()==0) {
	score1+=score;
	if (score1>999999)
	  score1=0;
	writenum(score1,0,0,6,1);
	if (score1>=nextbs1) {
	  if (dig.Main.getlives(1)<5) {
		dig.Main.addlife(1);
		dig.Drawing.drawlives();
	  }
	  nextbs1+=bonusscore;
	}
  }
  else {
	score2+=score;
	if (score2>999999)
	  score2=0;
	if (score2<100000)
	  writenum(score2,236,0,6,1);
	else
	  writenum(score2,248,0,6,1);
	if (score2>nextbs2) {   /* Player 2 doesn't get the life until >20,000 ! */
	  if (dig.Main.getlives(2)<5) {
		dig.Main.addlife(2);
		dig.Drawing.drawlives();
	  }
	  nextbs2+=bonusscore;
	}
  }
  dig.Main.incpenalty();
  dig.Main.incpenalty();
  dig.Main.incpenalty();
}
function drawscores () {
  writenum(score1,0,0,6,3);
  if (dig.Main.getnplayers()==2)
	if (score2<100000)
	  writenum(score2,236,0,6,3);
	else
	  writenum(score2,248,0,6,3);
}
function endofgame () {
  var i,j,z;
  addscore(0);
  if (dig.Main.getcplayer()==0)
	scoret=score1;
  else
	scoret=score2;
  if (scoret>scorehigh[11]) {
	dig.Pc.gclear();
	drawscores();
	dig.Drawing.outtext("PLAYER "+(dig.Main.getcplayer() + 1),108,0,2,true);
	dig.Drawing.outtext(" NEW HIGH SCORE ",64,40,2,true);
	getinitials();
	shufflehigh();
	savescores();
  }
  else {
	dig.Main.cleartopline();
	dig.Drawing.outtext("GAME OVER",104,0,3,true);
	dig.Sound.killsound();
	for (j=0;j<20;j++) /* Number of times screen flashes * 2 */
	  for (i=0;i<2;i++) { //i<8;i++) {
		dig.Sprite.setretr(true);
//		dig.Pc.ginten(1-(j&1));
		dig.Pc.gpal(1-(j&1));
		dig.Sprite.setretr(false);
		//for (z=0;z<111;z++); /* A delay loop */
		dig.Pc.gpal(0);
//		dig.Pc.ginten(0);
		dig.Pc.ginten (1-i&1);
		dig.newframe ();
	  }
	dig.Sound.setupsound();
	dig.Drawing.outtext("         ",104,0,3,true);
	dig.Sprite.setretr(true);
  }
}
function flashywait(n) {
/*  int i,gt,cx,p=0,k=1;
  int gap=19;
  dig.Sprite.setretr(false);
  for (i=0;i<(n<<1);i++) {
	for (cx=0;cx<dig.Sound.getvolume();cx++) {
	  dig.Pc.gpal(p=1-p);
	  for (gt=0;gt<gap;gt++);
	}
	} */
}
function getinitial (x,y) {
  var i,j;
  dig.Input.keypressed_w(0);
  dig.Pc.gwrite(x,y,'_',3, true);
  for (j=0;j<5;j++) {
	for (i=0;i<40;i++) {
	  if ((dig.Input.keypressed_r()&0x80)==0 && dig.Input.keypressed_r()!=0)
		return dig.Input.keypressed_r();
	  flashywait(15);
	}
	for (i=0;i<40;i++) {
	  if ((dig.Input.keypressed_r()&0x80)==0 && dig.Input.keypressed_r()!=0) {
		dig.Pc.gwrite(x,y,'_',3, true);
		return dig.Input.keypressed_r();
	  }
	  flashywait(15);
	}
  }
  gotinitflag=true;
  return 0;
}
function getinitials () {
  var k,i;
  dig.Drawing.outtext("ENTER YOUR",100,70,3,true);
  dig.Drawing.outtext(" INITIALS",100,90,3,true);
  dig.Drawing.outtext("_ _ _",128,130,3,true);
	scoreinit[0] = "...";
  dig.Sound.killsound();
  gotinitflag=false;
  for (i=0;i<3;i++) {
	k=0;
	while (k==0 && !gotinitflag) {
	  k=getinitial(i*24+128,130);
	  if (i!=0 && k==8)
			i--;
	  k=dig.Input.getasciikey(k);
	}
	if (k!=0) {
	  dig.Pc.gwrite(i*24+128,130,k,3,true);
	  //scoreinit[0].setCharAt(i, String.fromCharCode(k));
	}
  }
  dig.Input.keypressed_w(0);
  for (i=0;i<20;i++)
	flashywait(15);
  dig.Sound.setupsound();
  dig.Pc.gclear();
  dig.Pc.gpal(0);
  dig.Pc.ginten(0);
dig.newframe ();	// needed by Java version!!
  dig.Sprite.setretr(true);
}
function initscores () {
  addscore(0);
}
function loadscores () {
  var p=1,i,x;
  //readscores();
  for (i=1;i<11;i++) {
	for (x=0;x<3;x++)
	  scoreinit[i]="..."; //  scorebuf[p++];
	p+=2;
	for (x=0;x<6;x++)
	  highbuf[x]=scorebuf[p++];
	scorehigh[i+1]=0; //atol(highbuf);
  }
  if (scorebuf[0]!='s')
	for (i=0;i<11;i++) {
	  scorehigh[i+1]=0;
	  scoreinit[i] = "...";
	}
  var ds=null;
  if (ds = window.localStorage.getItem("ds")) {
    var st = ds.split(' ');
    for (i=0;i<st.length&&i<11;i++)
      scorehigh[i+2]=st[i];
  }
}
function savescores () {
  var i, st = '';
  for (i=0;i<10;i++)
    st += (i>0 ? ' ' : '') + scorehigh[i+2];
  window.localStorage.setItem("ds", st);
}
function numtostring (n) {
  var x;
  var p = "";
  for (x=0;x<6;x++) {
	p = String(n%10) + p;
	n = Math.floor(n/10);
	if (n==0) {
	  x++;
	  break;
	}
  }
  for (;x<6;x++)
	p = ' ' + p;
	return p;
}
function scorebonus () {
  addscore(1000);
}
function scoreeatm () {
  addscore(dig.eatmsc_r()*200);
  dig.eatmsc_w(dig.eatmsc_r()<<1);
}
function scoreemerald () {
  addscore(25);
}
function scoregold () {
  addscore(500);
}
function scorekill () {
  addscore(250);
}
function scoreoctave () {
  addscore(250);
}
function showtable () {
  var i,col;
  dig.Drawing.outtext("HIGH SCORES",16,25,3);
  col=2;
  for (i=1;i<11;i++) {
	  hsbuf = scoreinit[i]+"  "+numtostring (scorehigh[i+1]);
	dig.Drawing.outtext(hsbuf,16,31+13*i,col);
	col=1;
  }
}
function shufflehigh () {
  var i,j;
  for (j=10;j>1;j--)
	if (scoret<scorehigh[j])
	  break;
  for (i=10;i>j;i--) {
	scorehigh[i+1]=scorehigh[i];
	scoreinit[i] = scoreinit[i-1];
  }
  scorehigh[j+1]=scoret;
  scoreinit[j] = scoreinit[0];
}
function writecurscore (bp6) {
  if (dig.Main.getcplayer()==0)
	writenum(score1,0,0,6,bp6);
  else
	if (score2<100000)
	  writenum(score2,236,0,6,bp6);
	else
	  writenum(score2,248,0,6,bp6);
}
function writenum (n,x,y,w,c) {
  var d,xp=(w-1)*12+x;
  while (w>0) {
	d=(n%10);
	if (w>1 || d>0)
	  dig.Pc.gwrite(xp,y,d+'0',c,false);	//true
	n= Math.floor(n/10);
	w--;
	xp-=12;
  }
}
function zeroscores () {
  score2=0;
  score1=0;
  scoret=0;
  nextbs1=bonusscore;
  nextbs2=bonusscore;
}

return {

setdg: setdg,
addscore: addscore,
drawscores: drawscores,
endofgame: endofgame,
flashywait: flashywait,
getinitial: getinitial,
getinitials: getinitials,
initscores: initscores,
loadscores: loadscores,
numtostring: numtostring,
scorebonus: scorebonus,
scoreeatm: scoreeatm,
scoreemerald: scoreemerald,
scoregold: scoregold,
scorekill: scorekill,
scoreoctave: scoreoctave,
showtable: showtable,
shufflehigh: shufflehigh,
writecurscore: writecurscore,
writenum: writenum,
zeroscores: zeroscores

}

}

function DSound(_d) {

var dig = _d;


var wavetype=0,musvol=0;
var spkrmode=0,timerrate=0x7d0;
var timercount=0,t2val=0,t0val=0;  //uint4
var pulsewidth=1;	
var volume=1;	// 0

var timerclock=0;		// sint3 (not imp)

var soundflag=true,musicflag=true;

var sndflag=false,soundpausedflag=false;

var soundlevdoneflag=false;
var nljpointer=0,nljnoteduration=0;

var newlevjingle = [0x8e8,0x712,0x5f2,0x7f0,0x6ac,0x54c,0x712,0x5f2,0x4b8,0x474,0x474];	// [11]

var soundfallflag=false,soundfallf=false;
var soundfallvalue,soundfalln=0;

var soundbreakflag=false;
var soundbreakduration=0,soundbreakvalue=0;

var soundwobbleflag=false;
var soundwobblen=0;

var soundfireflag=false;
var soundfirevalue,soundfiren=0;

var soundexplodeflag=false;
var soundexplodevalue,soundexplodeduration;

var soundbonusflag=false;
var soundbonusn=0;

var soundemflag=false;

var soundemeraldflag=false;
var soundemeraldduration,emerfreq,soundemeraldn;

var emfreqs = [ 0x8e8,0x7f0,0x712,0x6ac,0x5f2,0x54c,0x4b8,0x474 ];

var soundgoldflag=false,soundgoldf=false;
var soundgoldvalue1,soundgoldvalue2,soundgoldduration;

var soundeatmflag=false;
var soundeatmvalue,soundeatmduration,soundeatmn;

var soundddieflag=false;
var soundddien,soundddievalue;

var sound1upflag=false;
var sound1upduration=0;

var musicplaying=false;
var musicp=0,tuneno=0,noteduration=0,notevalue=0,musicmaxvol=0,musicattackrate=0,musicsustainlevel=0,musicdecayrate=0,musicnotewidth=0,musicreleaserate=0,musicstage=0,musicn=0;

var bonusjingle = [	// [321]
0x11d1,2,0x11d1,2,0x11d1,4,0x11d1,2,0x11d1,2,0x11d1,4,0x11d1,2,0x11d1,2,
0xd59,4, 0xbe4,4, 0xa98,4,0x11d1,2,0x11d1,2,0x11d1,4,0x11d1,2,0x11d1,2,
0x11d1,4, 0xd59,2, 0xa98,2, 0xbe4,4, 0xe24,4,0x11d1,4,0x11d1,2,0x11d1,2,
0x11d1,4,0x11d1,2,0x11d1,2,0x11d1,4,0x11d1,2,0x11d1,2, 0xd59,4, 0xbe4,4,
0xa98,4, 0xd59,2, 0xa98,2, 0x8e8,10,0xa00,2, 0xa98,2, 0xbe4,2, 0xd59,4,
0xa98,4, 0xd59,4,0x11d1,2,0x11d1,2,0x11d1,4,0x11d1,2,0x11d1,2,0x11d1,4,
0x11d1,2,0x11d1,2, 0xd59,4, 0xbe4,4, 0xa98,4,0x11d1,2,0x11d1,2,0x11d1,4,
0x11d1,2,0x11d1,2,0x11d1,4, 0xd59,2, 0xa98,2, 0xbe4,4, 0xe24,4,0x11d1,4,
0x11d1,2,0x11d1,2,0x11d1,4,0x11d1,2,0x11d1,2,0x11d1,4,0x11d1,2,0x11d1,2,
0xd59,4, 0xbe4,4, 0xa98,4, 0xd59,2, 0xa98,2, 0x8e8,10,0xa00,2, 0xa98,2,
0xbe4,2, 0xd59,4, 0xa98,4, 0xd59,4, 0xa98,2, 0xa98,2, 0xa98,4, 0xa98,2,
0xa98,2, 0xa98,4, 0xa98,2, 0xa98,2, 0xa98,4, 0x7f0,4, 0xa98,4, 0x7f0,4,
0xa98,4, 0x7f0,4, 0xa98,4, 0xbe4,4, 0xd59,4, 0xe24,4, 0xfdf,4, 0xa98,2,
0xa98,2, 0xa98,4, 0xa98,2, 0xa98,2, 0xa98,4, 0xa98,2, 0xa98,2, 0xa98,4,
0x7f0,4, 0xa98,4, 0x7f0,4, 0xa98,4, 0x7f0,4, 0x8e8,4, 0x970,4, 0x8e8,4,
0x970,4, 0x8e8,4, 0xa98,2, 0xa98,2, 0xa98,4, 0xa98,2, 0xa98,2, 0xa98,4,
0xa98,2, 0xa98,2, 0xa98,4, 0x7f0,4, 0xa98,4, 0x7f0,4, 0xa98,4, 0x7f0,4,
0xa98,4, 0xbe4,4, 0xd59,4, 0xe24,4, 0xfdf,4, 0xa98,2, 0xa98,2, 0xa98,4,
0xa98,2, 0xa98,2, 0xa98,4, 0xa98,2, 0xa98,2, 0xa98,4, 0x7f0,4, 0xa98,4,
0x7f0,4, 0xa98,4, 0x7f0,4, 0x8e8,4, 0x970,4, 0x8e8,4, 0x970,4, 0x8e8,4,
0x7d64 ];

var backgjingle = [	// [291]
0xfdf,2,0x11d1,2, 0xfdf,2,0x1530,2,0x1ab2,2,0x1530,2,0x1fbf,4, 0xfdf,2,
0x11d1,2, 0xfdf,2,0x1530,2,0x1ab2,2,0x1530,2,0x1fbf,4, 0xfdf,2, 0xe24,2,
0xd59,2, 0xe24,2, 0xd59,2, 0xfdf,2, 0xe24,2, 0xfdf,2, 0xe24,2,0x11d1,2,
0xfdf,2,0x11d1,2, 0xfdf,2,0x1400,2, 0xfdf,4, 0xfdf,2,0x11d1,2, 0xfdf,2,
0x1530,2,0x1ab2,2,0x1530,2,0x1fbf,4, 0xfdf,2,0x11d1,2, 0xfdf,2,0x1530,2,
0x1ab2,2,0x1530,2,0x1fbf,4, 0xfdf,2, 0xe24,2, 0xd59,2, 0xe24,2, 0xd59,2,
0xfdf,2, 0xe24,2, 0xfdf,2, 0xe24,2,0x11d1,2, 0xfdf,2,0x11d1,2, 0xfdf,2,
0xe24,2, 0xd59,4, 0xa98,2, 0xbe4,2, 0xa98,2, 0xd59,2,0x11d1,2, 0xd59,2,
0x1530,4, 0xa98,2, 0xbe4,2, 0xa98,2, 0xd59,2,0x11d1,2, 0xd59,2,0x1530,4,
0xa98,2, 0x970,2, 0x8e8,2, 0x970,2, 0x8e8,2, 0xa98,2, 0x970,2, 0xa98,2,
0x970,2, 0xbe4,2, 0xa98,2, 0xbe4,2, 0xa98,2, 0xd59,2, 0xa98,4, 0xa98,2,
0xbe4,2, 0xa98,2, 0xd59,2,0x11d1,2, 0xd59,2,0x1530,4, 0xa98,2, 0xbe4,2,
0xa98,2, 0xd59,2,0x11d1,2, 0xd59,2,0x1530,4, 0xa98,2, 0x970,2, 0x8e8,2,
0x970,2, 0x8e8,2, 0xa98,2, 0x970,2, 0xa98,2, 0x970,2, 0xbe4,2, 0xa98,2,
0xbe4,2, 0xa98,2, 0xd59,2, 0xa98,4, 0x7f0,2, 0x8e8,2, 0xa98,2, 0xd59,2,
0x11d1,2, 0xd59,2,0x1530,4, 0xa98,2, 0xbe4,2, 0xa98,2, 0xd59,2,0x11d1,2,
0xd59,2,0x1530,4, 0xa98,2, 0x970,2, 0x8e8,2, 0x970,2, 0x8e8,2, 0xa98,2,
0x970,2, 0xa98,2, 0x970,2, 0xbe4,2, 0xa98,2, 0xbe4,2, 0xd59,2, 0xbe4,2,
0xa98,4,0x7d64 ];

var dirge = [
0x7d00, 2,0x11d1, 6,0x11d1, 4,0x11d1, 2,0x11d1, 6, 0xefb, 4, 0xfdf, 2,
0xfdf, 4,0x11d1, 2,0x11d1, 4,0x12e0, 2,0x11d1,12,0x7d00,16,0x7d00,16,
0x7d00,16,0x7d00,16,0x7d00,16,0x7d00,16,0x7d00,16,0x7d00,16,0x7d00,16,
0x7d00,16,0x7d00,16,0x7d00,16,0x7d64 ];


var soundt0flag=false;

var int8flag=false;

function setdg(_d) { 
  dig = _d;
}

function initsound () {

  jsinitsound();

  settimer2(40);	// 0x20
  setspkrt2();
  settimer0(0);
  wavetype=2;
  t0val=12000;
  musvol=8;
  t2val=40;
  soundt0flag=true;
  sndflag=true;
  spkrmode=0;
  int8flag=false;
  setsoundt2();
  soundstop();
  setupsound();
  timerrate=0x4000;
  settimer0(0x4000);
}

function music(tune) {
tuneno=tune;
musicp=0;
noteduration=0;
switch (tune) {
case 0:
  musicmaxvol=50;
  musicattackrate=20;
  musicsustainlevel=20;
  musicdecayrate=10;
  musicreleaserate=4;
  break;
case 1:
  musicmaxvol=50;
  musicattackrate=50;
  musicsustainlevel=8;
  musicdecayrate=15;
  musicreleaserate=1;
  break;
case 2:
  musicmaxvol=50;
  musicattackrate=50;
  musicsustainlevel=25;
  musicdecayrate=5;
  musicreleaserate=1;
}
musicplaying=true;
if (tune==2)
  soundddieoff();
}

function musicoff () {
  musicplaying=false;
  musicp=0;
}

function musicupdate () {
if (!musicplaying)
  return;
if (noteduration!=0)
  noteduration--;
else {
musicstage=musicn=0;
switch (tuneno) {
  case 0:
	noteduration=bonusjingle[musicp+1]*3;
	musicnotewidth=noteduration-3;
	notevalue=bonusjingle[musicp];
	musicp+=2;
	if (bonusjingle[musicp]==0x7d64)
	  musicp=0;
	break;
  case 1:
	noteduration=backgjingle[musicp+1]*6;
	musicnotewidth=12;
	notevalue=backgjingle[musicp];
	musicp+=2;
	if (backgjingle[musicp]==0x7d64)
	  musicp=0;
	break;
  case 2:
	noteduration=dirge[musicp+1]*10;
	musicnotewidth=noteduration-10;
	notevalue=dirge[musicp];
	musicp+=2;
	if (dirge[musicp]==0x7d64)
	  musicp=0;
	break;
}
}
musicn++;
wavetype=1;
t0val=notevalue;
if (musicn>=musicnotewidth)
  musicstage=2;
switch(musicstage) {
case 0:
  if (musvol+musicattackrate>=musicmaxvol) {
	musicstage=1;
	musvol=musicmaxvol;
	break;
  }
  musvol+=musicattackrate;
  break;
case 1:
  if (musvol-musicdecayrate<=musicsustainlevel) {
	musvol=musicsustainlevel;
	break;
  }
  musvol-=musicdecayrate;
  break;
case 2:
  if (musvol-musicreleaserate<=1) {
	musvol=1;
	break;
  }
  musvol-=musicreleaserate;
}
if (musvol==1)
  t0val=0x7d00;
}

function setsoundmode () {
  spkrmode=wavetype;
  if (!soundt0flag && sndflag) {
    soundt0flag=true;
  setspkrt2();
  }
}

function setsoundt2 () {
  if (soundt0flag) {
    spkrmode=0;
    soundt0flag=false;
    setspkrt2();
  }
}

function sett0 () {
if (sndflag) {
timer2(t2val);
if (t0val<1000 && (wavetype==1 || wavetype==2))
  t0val=1000;
timer0(t0val);
timerrate=t0val;
if (musvol<1)
  musvol=1;
if (musvol>50)
  musvol=50;
pulsewidth=musvol*volume;
setsoundmode();
}
}

function sett2val(t2v) {
  if (sndflag)
    timer2(t2v);
}

function sound1up () {
  sound1upduration=96;
  sound1upflag=true;
}

function sound1upoff () {
  sound1upflag=false;
}

function sound1upupdate () {
  if (sound1upflag) {
    if (Math.floor(sound1upduration/3)%2!=0)
      t2val=(sound1upduration<<2)+600;
    sound1upduration--;
    if (sound1upduration<1)
      sound1upflag=false;
  }
}

function soundbonus () {
  soundbonusflag=true;
}

function soundbonusoff () {
  soundbonusflag=false;
  soundbonusn=0;
}

function soundbonusupdate () {
if (soundbonusflag) {
  soundbonusn++;
if (soundbonusn>15)
  soundbonusn=0;
if (soundbonusn>=0 && soundbonusn<6)
  t2val=0x4ce;
if (soundbonusn>=8 && soundbonusn<14)
  t2val=0x5e9;
}
}

function soundbreak () {
soundbreakduration=3;
if (soundbreakvalue<15000)
soundbreakvalue=15000;
soundbreakflag=true;
}

function soundbreakoff () {
soundbreakflag=false;
}

function soundbreakupdate () {
if (soundbreakflag)
if (soundbreakduration!=0) {
  soundbreakduration--;
  t2val=soundbreakvalue;
}
else
  soundbreakflag=false;
}

function soundddie () {
soundddien=0;
soundddievalue=20000;
soundddieflag=true;
}

function soundddieoff () {
soundddieflag=false;
}

function soundddieupdate () {
if (soundddieflag) {
soundddien++;
if (soundddien==1)
  musicoff();
if (soundddien>=1 && soundddien<=10)
  soundddievalue=20000-soundddien*1000;
if (soundddien>10)
  soundddievalue+=500;
if (soundddievalue>30000)
  soundddieoff();
t2val=soundddievalue;
}
}

function soundeatm () {
soundeatmduration=20;
soundeatmn=3;
soundeatmvalue=2000;
soundeatmflag=true;
}
function soundeatmoff () {
soundeatmflag=false;
}
function soundeatmupdate () {
if (soundeatmflag)
if (soundeatmn!=0) {
  if (soundeatmduration!=0) {
	if ((soundeatmduration%4)==1)
	  t2val=soundeatmvalue;
	if ((soundeatmduration%4)==3)
	  t2val=soundeatmvalue-(soundeatmvalue>>4);
	soundeatmduration--;
	soundeatmvalue-=(soundeatmvalue>>4);
  }
  else {
	soundeatmduration=20;
	soundeatmn--;
	soundeatmvalue=2000;
  }
}
else
  soundeatmflag=false;
}

function soundem () {
soundemflag=true;
}
function soundemerald(n) {
emerfreq=emfreqs[n];
soundemeraldduration=7;
soundemeraldn=0;
soundemeraldflag=true;
}
function soundemeraldoff () {
soundemeraldflag=false;
}
function soundemeraldupdate () {
if (soundemeraldflag)
if (soundemeraldduration!=0) {
  if (soundemeraldn==0 || soundemeraldn==1)
	t2val=emerfreq;
  soundemeraldn++;
  if (soundemeraldn>7) {
	soundemeraldn=0;
	soundemeraldduration--;
  }
}
else
  soundemeraldoff();
}
function soundemoff () {
soundemflag=false;
}
function soundemupdate () {
if (soundemflag) {
t2val=1000;
soundemoff();
}
}

function soundexplode () {
soundexplodevalue=1500;
soundexplodeduration=10;
soundexplodeflag=true;
soundfireoff();
}
function soundexplodeoff () {
soundexplodeflag=false;
}
function soundexplodeupdate () {
if (soundexplodeflag)
if (soundexplodeduration!=0) {
  soundexplodevalue=t2val=soundexplodevalue-(soundexplodevalue>>3);
  soundexplodeduration--;
}
else
  soundexplodeflag=false;
}

function soundfall () {
soundfallvalue=1000;
soundfallflag=true;
}
function soundfalloff () {
soundfallflag=false;
soundfalln=0;
}
function soundfallupdate () {
if (soundfallflag)
if (soundfalln<1) {
  soundfalln++;
  if (soundfallf)
	t2val=soundfallvalue;
}
else {
  soundfalln=0;
  if (soundfallf) {
	soundfallvalue+=50;
	soundfallf=false;
  }
  else
	soundfallf=true;
}
}

function soundfire () {
soundfirevalue=500;
soundfireflag=true;
}
function soundfireoff () {
soundfireflag=false;
soundfiren=0;
}
function soundfireupdate () {
if (soundfireflag) {
if (soundfiren==1) {
  soundfiren=0;
  soundfirevalue+=Math.floor(soundfirevalue/55);
  t2val=soundfirevalue+dig.Main.randno(soundfirevalue>>3);
  if (soundfirevalue>30000)
	soundfireoff();
}
else
  soundfiren++;
}
}

function soundgold () {
soundgoldvalue1=500;
soundgoldvalue2=4000;
soundgoldduration=30;
soundgoldf=false;
soundgoldflag=true;
}
function soundgoldoff () {
soundgoldflag=false;
}
function soundgoldupdate () {
if (soundgoldflag) {
if (soundgoldduration!=0)
  soundgoldduration--;
else
  soundgoldflag=false;
if (soundgoldf) {
  soundgoldf=false;
  t2val=soundgoldvalue1;
}
else {
  soundgoldf=true;
  t2val=soundgoldvalue2;
}
soundgoldvalue1+=(soundgoldvalue1>>4);
soundgoldvalue2-=(soundgoldvalue2>>4);
}
}

function soundint () {
  timerclock++;
  if (soundflag && !sndflag)
    sndflag=musicflag=true;
  if (!soundflag && sndflag) {
    sndflag=false;
    timer2(40);
    setsoundt2();
    soundoff();
  }
  if (sndflag && !soundpausedflag) {
    t0val=0x7d00;
    t2val=40;
    if (musicflag)
      musicupdate();
    soundemeraldupdate();
    soundwobbleupdate();
    soundddieupdate();
    soundbreakupdate();
    soundgoldupdate();
    soundemupdate();
    soundexplodeupdate();
    soundfireupdate();
    soundeatmupdate();
    soundfallupdate();
    sound1upupdate();
    soundbonusupdate();
soundlevdoneupdate();  //js
    if (t0val==0x7d00 || t2val!=40)
      setsoundt2();
    else {
      setsoundmode();
      sett0();
    }
    sett2val(t2val);
  }
}

function soundlevdone () {
  var timer=0;
  soundstop();
  nljpointer=0;
  nljnoteduration=20; //20
  soundlevdoneflag=true; //soundpausedflag=true;
/*
  while (soundlevdoneflag) {
    //fillbuffer();
    if (timerclock==timer)
      continue;
    soundlevdoneupdate();
    timer=timerclock;
  }
*/
  //soundlevdoneoff();
}

function soundlevdoneloop() {
  return soundlevdoneflag;
}

function soundlevdoneoff () {
  soundlevdoneflag=soundpausedflag=false;
}

function soundlevdoneupdate () {
if (!soundlevdoneflag) return; // js
  if (sndflag) {
    if (nljpointer<11)
      t2val=newlevjingle[nljpointer];
    t0val=t2val+35;
    musvol=50;
    setsoundmode();
    sett0();
    sett2val(t2val);
    if (nljnoteduration>0)
      nljnoteduration--;
    else {
      nljnoteduration=20;
      nljpointer++;
      if (nljpointer>10)
	soundlevdoneoff();
    }
  }
  else {
//	olddelay(100);
    soundlevdoneflag=false;
  }
}

function getmusicflag() {
  return musicflag;
}

function soundpause () {
  soundpausedflag=true;
}
function soundpauseoff () {
  soundpausedflag=false;
}

function soundstop () {
  soundfalloff();
  soundwobbleoff();
  soundfireoff();
  musicoff();
  soundbonusoff();
  soundexplodeoff();
  soundbreakoff();
  soundemoff();
  soundemeraldoff();
  soundgoldoff();
  soundeatmoff();
  soundddieoff();
  sound1upoff();
}

function soundwobble (wbl) {
  soundwobbleflag=true;
}

function soundwobbleoff () {
  soundwobbleflag=false;
  soundwobblen=0;
}

function soundwobbleupdate () {
if (soundwobbleflag) {
soundwobblen++;
if (soundwobblen>63)
  soundwobblen=0;
switch (soundwobblen) {
  case 0:
	t2val=0x7d0;
	break;
  case 16:
  case 48:
	t2val=0x9c4;
	break;
  case 32:
	t2val=0xbb8;
	break;
}
}
}

function startint8 () {
if (!int8flag) {
initint8();
timerrate=0x4000;
settimer0(0x4000);
int8flag=true;
}
}

function stopint8 () {
settimer0(0);
if (int8flag) {
restoreint8();
int8flag=false;
}

sett2val(40);
setspkrt2();
}

function getvolume() {
return volume; 
}

function setvolume(v) {
volume = v;
}

function setaudio(s) {
soundflag = s;
}

// ---

// newsnd/newsnd2.c

var MIN_SAMP = -0.3, MAX_SAMP = 0.3;	// org 0, 255

var rate;	// int
var t0rate,t2rate,t2new,t0v=0,t2v=0;	// uint4
var t2sw;	// bool


function setupsound() {
  inittimer();
  dig.curtime=0;
  startint8();
  //fillbuffer();
  //initsounddevice();	// fix
}

function killsound() {
  setsoundt2();
  timer2(40);
  stopint8();
  //killsounddevice();
}

function fillbuffer() { }


function s2settimer2(t2) {  // uint4
  if (t2==40)
    t2rate=0;
  else
    if (t2==0)
      t2rate=rate;
    else
      t2rate=Math.floor((rate<<16)/t2);	// fix, cast to uint4
      //t2rate=(Uint4)((((Uint5)rate)<<16)/t2);
}

function s2timer2(t2) {  // uint4
  s2settimer2(t2);
}

function s2soundoff() {
  t2sw=false;
}

function s2setspkrt2() {
  t2sw=true;
}

function s2settimer0(t0) {  // uint4
  if (t0==0)
    t0rate=rate;
  else
    t0rate=Math.floor((rate<<16)/t0);	// fix, cast to uint4
    //t0rate=(Uint4)((((Uint5)rate)<<16)/t0);
}

function s2timer0(t0) {  // uint4
  s2settimer0(t0);
}

function getsample2() {

  var t0=0, t2=0;

  t0v=(t0v+t0rate);
  if (t0v>65536) {
    t0v=t0v%65536;
    timercount=(timercount+timerrate);
    if (timercount>65536) {
      timercount=timercount%65536;
      soundint();
      timercount-=0x4000;
      if (timercount<0)
	timercount+=65536;
    }
  }

  t2v=(t2v+t2rate)%65536;
  if (spkrmode!=0)
    if (t0v>pulsewidth*63)	// 655 org, tmp
      t0=-32767;
    else
      t0=32767;
  if (t2rate!=0 && t2sw) {
    if (t2v>32767)
      t2=-32767;
    else
      t2=32767;
  }

  return (((t0+2*t2+98301)*(MAX_SAMP-MIN_SAMP))/196605)+MIN_SAMP;
}


// ---


function initint8() { }
function restoreint8() { }

function soundoff() { s2soundoff(); }
function setspkrt2() { s2setspkrt2(); }
function settimer0(t) { s2settimer0(t); }
function timer0(t) { s2timer0(t); }
function settimer2(t) { s2settimer2(t); }
function timer2(t) { s2timer2(t); }
function getsample() { return getsample2(); }


function inittimer() { }	// fix? set timer returned by gethrt to 0

//

function jsinitsound() {


  if ('AudioContext' in window)
    acon = new AudioContext();
  else if ('webkitAudioContext' in window)
    acon = new webkitAudioContext();

  if (typeof(acon) === 'undefined')
    return;

//  var bsize = 2048;
  rate = Math.floor(0x1234dd/acon.sampleRate);
  var bsize = (acon.sampleRate == 48000 ? 4096 : 2048);
  t2sw = false;


var austart = function() { 
  if (acon.state && acon.state == 'suspended')
   acon.resume();
  // anode must be global (webkit/chrome/safari gc bug)
  anode = (acon.createJavaScriptNode ? acon.createJavaScriptNode(bsize, 1, 1) : acon.createScriptProcessor(bsize, 1, 1));
  anode.onaudioprocess = function(e) {
    var ou = e.outputBuffer.getChannelData(0);
    for (var i=0;i<ou.length;i++)
      ou[i] = getsample();
  }
  anode.connect(acon.destination);
}

  fuinput = function() { austart(); fuinput = null; }

}

return {

setdg: setdg,
initsound: initsound,

setupsound: setupsound,
killsound: killsound,
soundoff: soundoff,

music: music,
musicoff: musicoff,
musicupdate: musicupdate,

setsoundmode: setsoundmode,
setsoundt2: setsoundt2,
sett0: sett0,
sett2val: sett2val,
sound1up: sound1up,
sound1upoff: sound1upoff,
sound1upupdate: sound1upupdate,
soundbonus: soundbonus,
soundbonusoff: soundbonusoff,
soundbonusupdate: soundbonusupdate,
soundbreak: soundbreak,
soundbreakoff: soundbreakoff,
soundbreakupdate: soundbreakupdate,
soundddie: soundddie,
soundddieoff: soundddieoff,
soundddieupdate: soundddieupdate,
soundeatm: soundeatm,
soundeatmoff: soundeatmoff,
soundeatmupdate: soundeatmupdate,
soundem: soundem,
soundemerald: soundemerald,
soundemeraldoff: soundemeraldoff,
soundemeraldupdate: soundemeraldupdate,
soundemoff: soundemoff,
soundemupdate: soundemupdate,
soundexplode: soundexplode,
soundexplodeoff: soundexplodeoff,
soundexplodeupdate: soundexplodeupdate,
soundfall: soundfall,
soundfalloff: soundfalloff,
soundfallupdate: soundfallupdate,
soundfire: soundfire,
soundfireoff: soundfireoff,
soundfireupdate: soundfireupdate,
soundgold: soundgold,
soundgoldoff: soundgoldoff,
soundgoldupdate: soundgoldupdate,
soundint: soundint,
soundlevdone: soundlevdone,
soundlevdoneoff: soundlevdoneoff,
soundlevdoneupdate: soundlevdoneupdate,
soundlevdoneloop: soundlevdoneloop,
soundpause: soundpause,
soundpauseoff: soundpauseoff,
soundstop: soundstop,
soundwobble: soundwobble,
soundwobbleoff: soundwobbleoff,
soundwobbleupdate: soundwobbleupdate,
startint8: startint8,
stopint8: stopint8,

getmusicflag: getmusicflag,
getvolume: getvolume,
setvolume: setvolume,
setaudio: setaudio

}

}

function DSprite(_d) {

var dig = _d;
	
var retrflag=true;

var sprrdrwf=[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];	// [17]
var sprrecf=[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];	// [17]
var sprenf=[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];	// [16]

var sprch=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [17]

var sprmov=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];	// [16], short

var sprx=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [17]
var spry=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [17]
var sprwid=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [17]
var sprhei=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [17]
var sprbwid=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [16]
var sprbhei=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [16]
var sprnch=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [16]
var sprnwid=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [16]
var sprnhei=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [16]
var sprnbwid=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [16]
var sprnbhei=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	// [16]

var defsprorder=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];	// [16]
var sprorder = defsprorder;

function setdg(_d) { 
  dig = _d;
}

function bcollide (bx,si) {
  if (sprx[bx]>=sprx[si]) {
	if (sprx[bx]+sprbwid[bx]>sprwid[si]*4+sprx[si]-sprbwid[si]-1)
	  return false;
  }
  else
	if (sprx[si]+sprbwid[si]>sprwid[bx]*4+sprx[bx]-sprbwid[bx]-1)
	  return false;
  if (spry[bx]>=spry[si]) {
	if (spry[bx]+sprbhei[bx]<=sprhei[si]+spry[si]-sprbhei[si]-1)
	  return true;
	return false;
  }
  if (spry[si]+sprbhei[si]<=sprhei[bx]+spry[bx]-sprbhei[bx]-1)
	return true;
  return false;
}
function bcollides (bx) {
  var si=bx,ax=0,dx=0;
  bx=0;
  do {
	if (sprenf[bx] && bx!=si) {
	  if (bcollide(bx,si))
		ax|=1<<dx;
	  sprx[bx]+=320;
	  spry[bx]-=2;
	  if (bcollide(bx,si))
		ax|=1<<dx;
	  sprx[bx]-=640;
	  spry[bx]+=4;
	  if (bcollide(bx,si))
		ax|=1<<dx;
	  sprx[bx]+=320;
	  spry[bx]-=2;
	}
	bx++;
	dx++;
  } while (dx!=16);
  return ax;
}
function clearrdrwf () {
  var i;
  clearrecf();
  for (i=0;i<17;i++)
	sprrdrwf[i]=false;
}
function clearrecf () {
  var i;
  for (i=0;i<17;i++)
	sprrecf[i]=false;
}
function collide (bx,si) {
  if (sprx[bx]>=sprx[si]) {
	if (sprx[bx]>sprwid[si]*4+sprx[si]-1)
	  return false;
  }
  else
	if (sprx[si]>sprwid[bx]*4+sprx[bx]-1)
	  return false;
  if (spry[bx]>=spry[si]) {
	if (spry[bx]<=sprhei[si]+spry[si]-1)
	  return true;
	return false;
  }
  if (spry[si]<=sprhei[bx]+spry[bx]-1)
	return true;
  return false;
}
function createspr (n,ch,mov,wid,hei,bwid,bhei) {
  sprnch[n&15]=sprch[n&15]=ch;
  sprmov[n&15]=mov;
  sprnwid[n&15]=sprwid[n&15]=wid;
  sprnhei[n&15]=sprhei[n&15]=hei;
  sprnbwid[n&15]=sprbwid[n&15]=bwid;
  sprnbhei[n&15]=sprbhei[n&15]=bhei;
  sprenf[n&15]=false;
}
function drawmiscspr (x,y,ch,wid,hei) {
  sprx[16]=x&-4;
  spry[16]=y;
  sprch[16]=ch;
  sprwid[16]=wid;
  sprhei[16]=hei;
  dig.Pc.gputim(sprx[16],spry[16],sprch[16],sprwid[16],sprhei[16]);
}
function drawspr (n, x, y) {
  var bx,t1,t2,t3,t4;
  bx=n&15;
  x&=-4;
  clearrdrwf();
  setrdrwflgs(bx);
  t1=sprx[bx];
  t2=spry[bx];
  t3=sprwid[bx];
  t4=sprhei[bx];
  sprx[bx]=x;
  spry[bx]=y;
  sprwid[bx]=sprnwid[bx];
  sprhei[bx]=sprnhei[bx];
  clearrecf();
  setrdrwflgs(bx);
  sprhei[bx]=t4;
  sprwid[bx]=t3;
  spry[bx]=t2;
  sprx[bx]=t1;
  sprrdrwf[bx]=true;
  putis();
  sprx[bx]=x;
  spry[bx]=y;
  sprch[bx]=sprnch[bx];
  sprwid[bx]=sprnwid[bx];
  sprhei[bx]=sprnhei[bx];
  sprbwid[bx]=sprnbwid[bx];
  sprbhei[bx]=sprnbhei[bx];
  dig.Pc.ggeti(sprx[bx],spry[bx],sprmov[bx],sprwid[bx],sprhei[bx]);
  putims();
  return bcollides(bx);
}
function erasespr (n) {
  var bx=n&15;
  dig.Pc.gputi(sprx[bx],spry[bx],sprmov[bx],sprwid[bx],sprhei[bx],true);
  sprenf[bx]=false;
  clearrdrwf();
  setrdrwflgs(bx);
  putims();
}
function getis () {
  var i;
  for (i=0;i<16;i++)
	if (sprrdrwf[i])
	  dig.Pc.ggeti(sprx[i],spry[i],sprmov[i],sprwid[i],sprhei[i]);
  putims();
}
function initmiscspr (x,y,wid,hei) {
  sprx[16]=x;
  spry[16]=y;
  sprwid[16]=wid;
  sprhei[16]=hei;
  clearrdrwf();
  setrdrwflgs(16);
  putis();
}
function initspr (n,ch,wid,hei,bwid,bhei) {
  sprnch[n&15]=ch;
  sprnwid[n&15]=wid;
  sprnhei[n&15]=hei;
  sprnbwid[n&15]=bwid;
  sprnbhei[n&15]=bhei;
}
function movedrawspr (n,x,y) {
  var bx=n&15;
  sprx[bx]=x&-4;
  spry[bx]=y;
  sprch[bx]=sprnch[bx];
  sprwid[bx]=sprnwid[bx];
  sprhei[bx]=sprnhei[bx];
  sprbwid[bx]=sprnbwid[bx];
  sprbhei[bx]=sprnbhei[bx];
  clearrdrwf();
  setrdrwflgs(bx);
  putis();
  dig.Pc.ggeti(sprx[bx],spry[bx],sprmov[bx],sprwid[bx],sprhei[bx]);
  sprenf[bx]=true;
  sprrdrwf[bx]=true;
  putims();
  return bcollides(bx);
}
function putims () {
  var i,j;
  for (i=0;i<16;i++) {
	j=sprorder[i];
	if (sprrdrwf[j])
	  dig.Pc.gputim(sprx[j],spry[j],sprch[j],sprwid[j],sprhei[j]);
  }
}
function putis () {
  var i;
  for (i=0;i<16;i++)
	if (sprrdrwf[i])
	  dig.Pc.gputi(sprx[i],spry[i],sprmov[i],sprwid[i],sprhei[i]);
}
function setrdrwflgs (n) {
  var i;
  if (!sprrecf[n]) {
	sprrecf[n]=true;
	for (i=0;i<16;i++)
	  if (sprenf[i] && i!=n) {
		if (collide(i,n)) {
		  sprrdrwf[i]=true;
		  setrdrwflgs(i);
		}
		sprx[i]+=320;
		spry[i]-=2;
		if (collide(i,n)) {
		  sprrdrwf[i]=true;
		  setrdrwflgs(i);
		}
		sprx[i]-=640;
		spry[i]+=4;
		if (collide(i,n)) {
		  sprrdrwf[i]=true;
		  setrdrwflgs(i);
		}
		sprx[i]+=320;
		spry[i]-=2;
	  }
  }
}
function setretr (f) {
  retrflag=f;
}
function setsprorder (newsprorder) {
  if (newsprorder==null)
		sprorder=defsprorder;
  else
		sprorder=newsprorder;
}

return {

setdg: setdg,
bcollide: bcollide,
bcollides: bcollides,
clearrdrwf: clearrdrwf,
clearrecf: clearrecf,
collide: collide,
createspr: createspr,
drawmiscspr: drawmiscspr,
drawspr: drawspr,
erasespr: erasespr,
getis: getis,
initmiscspr: initmiscspr,
initspr: initspr,
movedrawspr: movedrawspr,
putims: putims,
putis: putis,
setrdrwflgs: setrdrwflgs,
setretr: setretr,
setsprorder: setsprorder

};

}
function Digger() {

var MAX_RATE = 200, MIN_RATE = 40;

var width = 320, height = 200, frametime = 66;

var gctx, gcnv, gcty, gimg, gpix, dcont, dwadj=0, dhadj=0;

var diggerx=0,diggery=0,diggerh=0,diggerv=0,diggerrx=0,diggerry=0,digmdir=0,
	digdir=0,digtime=0,rechargetime=0,firex=0,firey=0,firedir=0,expsn=0,
	deathstage=0,deathbag=0,deathani=0,deathtime=0,startbonustimeleft=0,
	bonustimeleft=0,eatmsc=0,emocttime=0,emn=0;

var emmask=0;

var emfield=[	//[150]
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

var digonscr=false,notfiring=false,bonusvisible=false,bonusmode=false,diggervisible=false;

var curtime,ftime = 50;
var embox=[8,12,12,9,16,12,6,9];	// [8]
var deatharc=[3,5,6,6,5,3,0];			// [7]

var Bags = new DBags ();
var Main = new DMain ();
var Sound = new DSound ();
var Monster = new DMonster ();
var Scores = new DScores ();
var Sprite = new DSprite ();
var Drawing = new DDrawing ();
var Input = new DInput ();
var Pc = new DPc ();


function checkdiggerunderbag (h, v) {
  if (digmdir==2 || digmdir==6)
	if (Math.floor((diggerx-12)/20)==h)
	  if (Math.floor((diggery-18)/18)==v || Math.floor((diggery-18)/18)+1==v)
		return true;
  return false;
}
function countem () {
  var x,y,n=0;
  for (x=0;x<15;x++)
	for (y=0;y<10;y++)
	  if ((emfield[y*15+x]&emmask)!=0)
		n++;
  return n;
}
function createbonus () {
  bonusvisible=true;
  Drawing.drawbonus(292,18);
}
function diggerdie () {
  var clbits;
  switch (deathstage) {
	case 1:
	  if (Bags.bagy(deathbag)+6>diggery)
		diggery=Bags.bagy(deathbag)+6;
	  Drawing.drawdigger(15,diggerx,diggery,false);
	  Main.incpenalty();
	  if (Bags.getbagdir(deathbag)+1==0) {
		Sound.soundddie();
		deathtime=5;
		deathstage=2;
		deathani=0;
		diggery-=6;
	  }
	  break;
	case 2:
	  if (deathtime!=0) {
		deathtime--;
		break;
	  }
	  if (deathani==0)
		Sound.music(2);
	  clbits=Drawing.drawdigger(14-deathani,diggerx,diggery,false);
	  Main.incpenalty();
	  if (deathani==0 && ((clbits&0x3f00)!=0))
		Monster.killmonsters(clbits);
	  if (deathani<4) {
		deathani++;
		deathtime=2;
	  }
	  else {
		deathstage=4;
		if (Sound.getmusicflag())
		  deathtime=60;
		else
		  deathtime=10;
	  }
	  break;
	case 3:
	  deathstage=5;
	  deathani=0;
	  deathtime=0;
	  break;
	case 5:
	  if (deathani>=0 && deathani<=6) {
		Drawing.drawdigger(15,diggerx,diggery-deatharc[deathani],false);
		if (deathani==6)
		  Sound.musicoff();
		Main.incpenalty();
		deathani++;
		if (deathani==1)
		  Sound.soundddie();
		if (deathani==7) {
		  deathtime=5;
		  deathani=0;
		  deathstage=2;
		}
	  }
	  break;
	case 4:
	  if (deathtime!=0)
		deathtime--;
	  else
		Main.setdead(true);
  }
}
function dodigger () {
  newframe();
  if (expsn!=0)
	drawexplosion();
  else
	updatefire();
  if (diggervisible)
	if (digonscr)
	  if (digtime!=0) {
		Drawing.drawdigger(digmdir,diggerx,diggery,notfiring && rechargetime==0);
		Main.incpenalty();
		digtime--;
	  }
	  else
		updatedigger();
	else
	  diggerdie();
  if (bonusmode && digonscr) {
	if (bonustimeleft!=0) {
	  bonustimeleft--;
	  if (startbonustimeleft!=0 || bonustimeleft<20) {
		if (startbonustimeleft)
		startbonustimeleft--;
		if ((bonustimeleft&1)!=0) {
		  Pc.ginten(0);
		  Sound.soundbonus();
		}
		else {
		  Pc.ginten(1);
		  Sound.soundbonus();
		}
		if (startbonustimeleft==0) {
		  Sound.music(0);
		  Sound.soundbonusoff();
		  Pc.ginten(1);
		}
	  }
	}
	else {
	  endbonusmode();
	  Sound.soundbonusoff();
	  Sound.music(1);
	}
  }
  if (bonusmode && !digonscr) {
	endbonusmode();
	Sound.soundbonusoff();
	Sound.music(1);
  }
  if (emocttime>0)
	emocttime--;
}
function drawemeralds () {
  var x,y;
  emmask=1<<Main.getcplayer();
  for (x=0;x<15;x++)
	for (y=0;y<10;y++)
	  if ((emfield[y*15+x]&emmask)!=0)
		Drawing.drawemerald(x*20+12,y*18+21);
}
function drawexplosion () {
  switch (expsn) {
	case 1:
	  Sound.soundexplode();
	case 2:
	case 3:
	  Drawing.drawfire(firex,firey,expsn);
	  Main.incpenalty();
	  expsn++;
	  break;
	default:
	  killfire();
	  expsn=0;
  }
}
function endbonusmode () {
  bonusmode=false;
  Pc.ginten(0);
}
function erasebonus () {
  if (bonusvisible) {
	bonusvisible=false;
	Sprite.erasespr(14);
  }
  Pc.ginten(0);
}
function erasedigger () {
  Sprite.erasespr(0);
  diggervisible=false;
}
function hitemerald (x, y, rx, ry, dir) {
  var hit=false;
  var r;
  if (dir<0 || dir>6 || ((dir&1)!=0))
	return hit;
  if (dir==0 && rx!=0)
	x++;
  if (dir==6 && ry!=0)
	y++;
  if (dir==0 || dir==4)
	r=rx;
  else
	r=ry;
  if ((emfield[y*15+x]&emmask)!=0) {
	if (r==embox[dir]) {
	  Drawing.drawemerald(x*20+12,y*18+21);
	  Main.incpenalty();
	}
	if (r==embox[dir+1]) {
	  Drawing.eraseemerald(x*20+12,y*18+21);
	  Main.incpenalty();
	  hit=true;
	  emfield[y*15+x]&=~emmask;
	}
  }
  return hit;
}

function init () {

    Bags.setdg(this);
    Main.setdg(this);
    Sound.setdg(this);
    Monster.setdg(this);
    Scores.setdg(this);
    Sprite.setdg(this);
    Drawing.setdg(this);
    Input.setdg(this);
    Pc.setdg(this);

    document.onkeydown = function(e) { if (typeof(fuinput)=='function') fuinput(); keyDown(e); }
    document.onkeyup = keyUp;
    document.onkeypress = keyPress;

    document.ontouchmove = function(e) { e.preventDefault(); }

    var tt = { af: [0x3b, 0xbb], ag: [0x3b, 0xbb],   // fire x2
               al: [0x4b, 0xcb], ar: [0x4d, 0xcd], 
	       au: [0x48, 0xc8], ad: [0x50, 0xd0],
               arev1: null, arev2: null };

    var ttrev = { al: "ar", ar: "al", au: "ad", ad: "au" };

    for (var i in tt) {
      var el = document.getElementById(i);
      if (!el)
        continue;
      var irev = ttrev[i];
      dotouch(el, tt[i], irev ? tt[irev] : null);
    }

    var arlast = null;
    function dotouch(el, kpair, krev) {
      var rkpair = null;
      el.ontouchstart = function(e) {
	if (!e.targetTouches.length) return;
	if (krev)
	  arlast = krev;
	if (!kpair) {
	  if (!arlast) return;
	  rkpair = arlast;
	}
	Input.processkey(rkpair ? rkpair[0] : kpair[0]);
      }
      el.ontouchend = function(e) {
	Input.processkey(rkpair ? rkpair[1] : kpair[1]);
      }
    }

    if (!Date.now)
	Date.now = function() { return +new Date(); }

    dcont = document.getElementById("dcont");
    if (!dcont)
      return;

    dcnv = document.createElement("canvas");
    dcont.appendChild(dcnv);

    dctx = dcnv.getContext("2d");

window.digsnd = function(s) { Sound.setaudio(!!s); }

window.digadj = function() {

  if (!dcont || !dcnv) return;

  var dpr = window.devicePixelRatio || 1;

  var dw = dcont.offsetWidth, dh = dcont.offsetHeight;
  if (dw > 320) dw=Math.floor(dw/160)*160;  
  if (dh == 320) dh=300;

  if (dh > dw*200/320)
    dh = Math.round(dw*200/320);
  if (dw > dh*320/200)
    dw = Math.round(dh*320/200);

  dcnv.style.marginTop = ((dcont.offsetHeight-dh)>>1) + 'px';

  if (dwadj==dw && dhadj==dh) return;

  dwadj = dw;
  dhadj = dh;

  dcnv.width = Math.round(dw*dpr);
  dcnv.height = Math.round(dh*dpr);
  dcnv.style.width = dw+'px';
  dcnv.style.height = dh+'px';

  dctx.imageSmoothingEnabled = false;
  dctx.webkitImageSmoothingEnabled = false;
  dctx.mozImageSmoothingEnabled = false;

}

    digadj();

    gcnv = document.createElement("canvas");
    gcnv.width = width;
    gcnv.height = height;
    gcty = gcnv.getContext("2d");
    gimg = gcty.getImageData(0, 0, width, height);
    gpix = gimg.data;
    for (var i=3;i<gpix.length;i+=4)
	gpix[i] = 0xff;

    Main.main();

}

function initbonusmode () {
  bonusmode=true;
  erasebonus();
  Pc.ginten(1);
  bonustimeleft=250-Main.levof10()*20;
  startbonustimeleft=20;
  eatmsc=1;
}
function initdigger () {
  diggerv=9;
  digmdir=4;
  diggerh=7;
  diggerx=diggerh*20+12;
  digdir=0;
  diggerrx=0;
  diggerry=0;
  digtime=0;
  digonscr=true;
  deathstage=1;
  diggervisible=true;
  diggery=diggerv*18+18;
  Sprite.movedrawspr(0,diggerx,diggery);
  notfiring=true;
  emocttime=0;
  emn=0;
  bonusvisible=bonusmode=false;
  Input.firepressed_w(false);
  expsn=0;
  rechargetime=0;
}
function keyDown (e) {
	e = e || window.event;
	var key = e.keyCode;
	switch (key) {
		case 37 /*1006*/: Input.processkey (0x4b);	break;
		case 39 /*1007*/: Input.processkey (0x4d);	break;
		case 38 /*1004*/: Input.processkey (0x48);	break;
		case 40 /*1005*/: Input.processkey (0x50);	break;
		case 32 /*1008*/: Input.processkey (0x3b);	break;
		default:
		  return;
	}
	if (e.preventDefault)
	    e.preventDefault();
}
function keyUp (e) {
	e = e || window.event;
	var key = e.keyCode;
	switch (key) {
		case 37 /*1006*/: Input.processkey (0xcb);	break;
		case 39 /*1007*/: Input.processkey (0xcd);	break;
		case 38 /*1004*/: Input.processkey (0xc8);	break;
		case 40 /*1005*/: Input.processkey (0xd0);	break;
		case 32 /*1008*/: Input.processkey (0xbb);	break;
		default:
		   return;
	}
	if (e.preventDefault)
	    e.preventDefault();
}
function keyPress(e) {
  e = e || window.event;
  switch (e.keyCode) {
	case 37: 
	case 38:
	case 39:
	case 40:
	case 32: break;
	default: return;
  }
  if (e.preventDefault)
    e.preventDefault();
}
function killdigger (stage, bag) {
  if (deathstage<2 || deathstage>4) {
	digonscr=false;
	deathstage=stage;
	deathbag=bag;
  }
}
function killemerald (x, y) {
  if ((emfield[y*15+x+15]&emmask)!=0) {
	emfield[y*15+x+15]&=~emmask;
	Drawing.eraseemerald(x*20+12,(y+1)*18+21);
  }
}
function killfire () {
  if (!notfiring) {
	notfiring=true;
	Sprite.erasespr(15);
	Sound.soundfireoff();
  }
}
function makeemfield () {
  var x,y;
  emmask=1<<Main.getcplayer();
  for (x=0;x<15;x++)
	for (y=0;y<10;y++)
	  if (Main.getlevch(x,y,Main.levplan())=='C')
		emfield[y*15+x]|=emmask;
	  else
		emfield[y*15+x]&=~emmask;
}
function newframe () {

  Input.checkkeyb ();
  curtime += frametime;

/*  var l = time - Pc.gethrt ();
  if (l>0)
    try { Thread.sleep ((int)l); } catch (Exception e) { }
*/

  gcty.putImageData(gimg, 0, 0);
  dctx.drawImage(gcnv, 0, 0, dcnv.width, dcnv.height);

}
function reversedir (dir) {
  switch (dir) {
	case 0: return 4;
	case 4: return 0;
	case 2: return 6;
	case 6: return 2;
  }
  return dir;
}
function updatedigger () {
  var dir,ddir,clbits,diggerox,diggeroy,nmon;
  var push = false;
  Input.readdir();
  dir=Input.getdir();
  if (dir==0 || dir==2 || dir==4 || dir==6)
	ddir=dir;
  else
	ddir=-1;
  if (diggerrx==0 && (ddir==2 || ddir==6))
	digdir=digmdir=ddir;
  if (diggerry==0 && (ddir==4 || ddir==0))
	digdir=digmdir=ddir;
  if (dir==-1)
	digmdir=-1;
  else
	digmdir=digdir;
  if ((diggerx==292 && digmdir==0) || (diggerx==12 && digmdir==4) ||
	  (diggery==180 && digmdir==6) || (diggery==18 && digmdir==2))
	digmdir=-1;
  diggerox=diggerx;
  diggeroy=diggery;
  if (digmdir!=-1)
	Drawing.eatfield(diggerox,diggeroy,digmdir);
  switch (digmdir) {
	case 0:
	  Drawing.drawrightblob(diggerx,diggery);
	  diggerx+=4;
	  break;
	case 4:
	  Drawing.drawleftblob(diggerx,diggery);
	  diggerx-=4;
	  break;
	case 2:
	  Drawing.drawtopblob(diggerx,diggery);
	  diggery-=3;
	  break;
	case 6:
	  Drawing.drawbottomblob(diggerx,diggery);
	  diggery+=3;
	  break;
  }
  if (hitemerald(Math.floor((diggerx-12)/20),Math.floor((diggery-18)/18),
		(diggerx-12)%20, (diggery-18)%18,digmdir)) {
	if (emocttime==0)
	  emn=0;
	Scores.scoreemerald();
	Sound.soundem();
	Sound.soundemerald(emn); //emocttime);
	emn++;
	if (emn==8) {
	  emn=0;
	  Scores.scoreoctave();
	}
	emocttime=9;
  }
  clbits=Drawing.drawdigger(digdir,diggerx,diggery,notfiring && rechargetime==0);
  Main.incpenalty();
  if ((Bags.bagbits()&clbits)!=0) {
	if (digmdir==0 || digmdir==4) {
	  push=Bags.pushbags(digmdir,clbits);
	  digtime++;
	}
	else
	  if (!Bags.pushudbags(clbits))
		push=false;
	if (!push) { /* Strange, push not completely defined */
	  diggerx=diggerox;
	  diggery=diggeroy;
	  Drawing.drawdigger(digmdir,diggerx,diggery,notfiring && rechargetime==0);
	  Main.incpenalty();
	  digdir=reversedir(digmdir);
	}
  }
  if (((clbits&0x3f00)!=0) && bonusmode)
	for (nmon=Monster.killmonsters(clbits);nmon!=0;nmon--) {
	  Sound.soundeatm();
	  Scores.scoreeatm();
	}
  if ((clbits&0x4000)!=0) {
	Scores.scorebonus();
	initbonusmode();
  }
  diggerh=Math.floor((diggerx-12)/20);
  diggerrx=(diggerx-12)%20;
  diggerv=Math.floor((diggery-18)/18);
  diggerry=(diggery-18)%18;
}
function updatefire () {
  var clbits,b,mon,pix = 0;
  if (notfiring) {
	if (rechargetime!=0)
	  rechargetime--;
	else
	  if (Input.getfirepflag())
		if (digonscr) {
		  rechargetime=Main.levof10()*3+60;
		  notfiring=false;
		  switch (digdir) {
			case 0:
			  firex=diggerx+8;
			  firey=diggery+4;
			  break;
			case 4:
			  firex=diggerx;
			  firey=diggery+4;
			  break;
			case 2:
			  firex=diggerx+4;
			  firey=diggery;
			  break;
			case 6:
			  firex=diggerx+4;
			  firey=diggery+8;
		  }
		  firedir=digdir;
		  Sprite.movedrawspr(15,firex,firey);
		  Sound.soundfire();
		}
  }
  else {
	switch (firedir) {
	  case 0:
		firex+=8;
		pix=Pc.ggetpix(firex,firey+4)|Pc.ggetpix(firex+4,firey+4);
		break;
	  case 4:
		firex-=8;
		pix=Pc.ggetpix(firex,firey+4)|Pc.ggetpix(firex+4,firey+4);
		break;
	  case 2:
		firey-=7;
		pix=(Pc.ggetpix(firex+4,firey)|Pc.ggetpix(firex+4,firey+1)|
			 Pc.ggetpix(firex+4,firey+2)|Pc.ggetpix(firex+4,firey+3)|
			 Pc.ggetpix(firex+4,firey+4)|Pc.ggetpix(firex+4,firey+5)|
			 Pc.ggetpix(firex+4,firey+6))&0xc0;
		break;
	  case 6:
		firey+=7;
		pix=(Pc.ggetpix(firex,firey)|Pc.ggetpix(firex,firey+1)|
			 Pc.ggetpix(firex,firey+2)|Pc.ggetpix(firex,firey+3)|
			 Pc.ggetpix(firex,firey+4)|Pc.ggetpix(firex,firey+5)|
			 Pc.ggetpix(firex,firey+6))&3;
		break;
	}
	clbits=Drawing.drawfire(firex,firey,0);
	Main.incpenalty();
	if ((clbits&0x3f00)!=0)
	  for (mon=0,b=256;mon<6;mon++,b<<=1)
		if ((clbits&b)!=0) {
		  Monster.killmon(mon);
		  Scores.scorekill();
		  expsn=1;
		}
	if ((clbits&0x40fe)!=0)
	  expsn=1;
	switch (firedir) {
	  case 0:
		if (firex>296)
		  expsn=1;
		else
		  if (pix!=0 && clbits==0) {
			expsn=1;
			firex-=8;
			Drawing.drawfire(firex,firey,0);
		  }
		break;
	  case 4:
		if (firex<16)
		  expsn=1;
		else
		  if (pix!=0 && clbits==0) {
			expsn=1;
			firex+=8;
			Drawing.drawfire(firex,firey,0);
		  }
		break;
	  case 2:
		if (firey<15)
		  expsn=1;
		else
		  if (pix!=0 && clbits==0) {
			expsn=1;
			firey+=7;
			Drawing.drawfire(firex,firey,0);
		  }
		break;
	  case 6:
		if (firey>183)
		  expsn=1;
		else
		  if (pix!=0 && clbits==0) {
			expsn=1;
			firey-=7;
			Drawing.drawfire(firex,firey,0);
		  }
	}
  }
}

return {

checkdiggerunderbag: checkdiggerunderbag,
countem: countem,
createbonus: createbonus,
diggerdie: diggerdie,
dodigger: dodigger,
drawemeralds: drawemeralds,
drawexplosion: drawexplosion,
endbonusmode: endbonusmode,
erasebonus: erasebonus,
erasedigger: erasedigger,
hitemerald: hitemerald,
init: init,
initbonusmode: initbonusmode,
initdigger: initdigger,
killdigger: killdigger,
killemerald: killemerald,
killfire: killfire,
makeemfield: makeemfield,
newframe: newframe,
reversedir: reversedir,
updatedigger: updatedigger,
updatefire: updatefire,

Bags: Bags,
Main: Main,
Sound: Sound,
Monster: Monster,
Scores: Scores,
Sprite: Sprite,
Drawing: Drawing,
Input: Input,
Pc: Pc,

bonusmode_r: function() { return bonusmode; },
bonusvisible_w: function(x) { bonusvisible = x; },
diggerx_r: function() { return diggerx; },
diggery_r: function() { return diggery; },
digonscr_r: function() { return digonscr; },
digtime_w: function(x) { digtime = x; },
eatmsc_r: function() { return eatmsc; },
eatmsc_w: function(x) { eatmsc = x; },
time_w: function(x) { curtime = x; },

getgpix: function() { return gpix; }

}

}

function digstart() { new Digger().init(); }


var alpha = (function() {

var copyright = "Portions Copyright(c) 1983 Windmill Software Inc.";

var textoffdat = [	// [16]
   72,   0, -72,-72,
  144,   0,-288,144,
  144,-216, 144,-72,
  144,-216, -72,144 ];

var cgaletA = [
  0x0f,0xff,0x00,
  0x3f,0xff,0xc0,
  0x3c,0x03,0xc0,
  0x3c,0x03,0xc0,
  0x3c,0x03,0xc0,
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xfc,0x00,0xf0,
  0xfc,0x00,0xf0,
  0xfc,0x00,0xf0,
  0xfc,0x00,0xf0,
  0xfc,0x00,0xf0];

var cgaletB = [
  0x3f,0xfc,0x00,
  0xff,0xff,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xff,0xff,0x00,
  0xff,0xff,0xf0,
  0xfc,0x00,0xf0,
  0xfc,0x00,0xf0,
  0xfc,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletC = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0x00,
  0xfc,0x00,0x00,
  0xfc,0x00,0x00,
  0xfc,0x00,0x00,
  0xfc,0x00,0xf0,
  0xfc,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletD = [
  0xff,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0xff,0xf0,
  0xff,0xff,0xc0];

var cgaletE = [
  0x3f,0xff,0xf0,
  0xff,0xff,0xf0,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xff,0xff,0x00,
  0xff,0xff,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0xff,0xf0,
  0x3f,0xff,0xf0];

var cgaletF = [
  0x3f,0xff,0xf0,
  0xff,0xff,0xf0,
  0xfc,0x00,0x00,
  0xfc,0x00,0x00,
  0xfc,0x00,0x00,
  0xff,0xff,0x00,
  0xff,0xff,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00];

var cgaletG = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xfc,0x0f,0xc0,
  0xff,0x0f,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletH = [
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xff,0xff,0xf0,
  0xff,0xff,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0];

var cgaletI = [
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00];

var cgaletJ = [
  0x00,0x0f,0x00,
  0x00,0x0f,0x00,
  0x00,0x0f,0x00,
  0x00,0x0f,0x00,
  0x00,0x0f,0x00,
  0x00,0x0f,0xf0,
  0x00,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletK = [
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xff,0xff,0x00,
  0xff,0xff,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0];

var cgaletL = [
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0xff,0xf0,
  0x3f,0xff,0xf0];

var cgaletM = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0];

var cgaletN = [
  0x0f,0xff,0xc0,
  0x3f,0xff,0xf0,
  0x3c,0x00,0xf0,
  0x3c,0x00,0xf0,
  0x3c,0x00,0xf0,
  0x3c,0x00,0xf0,
  0x3f,0x00,0xf0,
  0x3f,0x00,0xf0,
  0x3f,0x00,0xf0,
  0x3f,0x00,0xf0,
  0x3f,0x00,0xf0,
  0x3f,0x00,0xf0];

var cgaletO = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletP = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xff,0xff,0xf0,
  0xff,0xff,0xc0,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0x00];

var cgaletQ = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x3f,0xf0,
  0xf0,0x3f,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletR = [
  0x3f,0xfc,0x00,
  0xff,0xff,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xff,0xff,0x00,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0];

var cgaletS = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xff,0xff,0xc0,
  0x3f,0xff,0xf0,
  0x00,0x0f,0xf0,
  0x00,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletT = [
  0xff,0xff,0xf0,
  0xff,0xff,0xf0,
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xf0,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00,
  0x00,0xff,0x00];

var cgaletU = [
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletV = [
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0x3c,0x0f,0x00,
  0x3c,0x0f,0x00,
  0x3f,0xff,0x00,
  0x0f,0xfc,0x00];

var cgaletW = [
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xf0,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xfc,0xf0,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cgaletX = [
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0x0f,0xff,0x00,
  0x0f,0xff,0x00,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0,
  0xff,0x00,0xf0];

var cgaletY = [
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00];

var cgaletZ = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0x00,0x00,0xf0,
  0x00,0x00,0xf0,
  0x3f,0xff,0xf0,
  0xff,0xff,0xc0,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cganum0 = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cganum1 = [
  0x00,0x3c,0x00,
  0x00,0x3c,0x00,
  0x00,0x3c,0x00,
  0x00,0x3c,0x00,
  0x00,0x3c,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00,
  0x00,0xfc,0x00];

var cganum2 = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0x00,0x00,0xf0,
  0x00,0x00,0xf0,
  0x00,0x00,0xf0,
  0x3f,0xff,0xf0,
  0xff,0xff,0xc0,
  0xff,0x00,0x00,
  0xff,0x00,0x00,
  0xff,0xff,0xf0,
  0x3f,0xff,0xf0];

var cganum3 = [
  0x3f,0xfc,0x00,
  0xff,0xff,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0x00,0x0f,0x00,
  0x0f,0xff,0xc0,
  0x0f,0xff,0xf0,
  0x00,0x03,0xf0,
  0xf0,0x03,0xf0,
  0xf0,0x03,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cganum4 = [
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xf0,0x0f,0x00,
  0xff,0xff,0xf0,
  0x3f,0xff,0xf0,
  0x00,0x3f,0x00,
  0x00,0x3f,0x00,
  0x00,0x3f,0x00];

var cganum5 = [
  0x3f,0xff,0x00,
  0xff,0xff,0x00,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xf0,0x00,0x00,
  0xff,0xff,0xc0,
  0x3f,0xff,0xf0,
  0x00,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cganum6 = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0x00,
  0xff,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xf0,0x0f,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cganum7 = [
  0x3f,0xff,0xc0,
  0x3f,0xff,0xf0,
  0x00,0x00,0xf0,
  0x00,0x00,0xf0,
  0x00,0x00,0xf0,
  0x00,0x00,0xf0,
  0x00,0x03,0xf0,
  0x00,0x03,0xf0,
  0x00,0x03,0xf0,
  0x00,0x03,0xf0,
  0x00,0x03,0xf0,
  0x00,0x03,0xf0];

var cganum8 = [
  0x03,0xff,0x00,
  0x0f,0xff,0xc0,
  0x0f,0x03,0xc0,
  0x0f,0x03,0xc0,
  0x0f,0x03,0xc0,
  0x0f,0xff,0xc0,
  0x3f,0xff,0xf0,
  0xf0,0x03,0xf0,
  0xf0,0x03,0xf0,
  0xf0,0x03,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xc0];

var cganum9 = [
  0x3f,0xff,0xc0,
  0xff,0xff,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xf0,0x00,0xf0,
  0xff,0xff,0xf0,
  0x3f,0xff,0xf0,
  0x00,0x0f,0xf0,
  0x00,0x0f,0xf0,
  0x00,0x0f,0xf0,
  0x00,0x0f,0xf0,
  0x00,0x0f,0xf0];

var cgasymdot = [
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x03,0xc0,0x00,
  0x03,0xc0,0x00];

var cgasymline = [
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x0f,0xff,0xf0];

var cgasymspace = [
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00,
  0x00,0x00,0x00];

return {

  ascii2cga : [	// [0x5f], short
  cgasymspace,null,null,null,null,null,null,null,null,null,null,null,null,null,cgasymdot,null,     /*  !"#$%&'()*+,-./ */
  cganum0,cganum1,cganum2,cganum3,cganum4,cganum5,cganum6,        /* 0123456 */
  cganum7,cganum8,cganum9,null,null,null,null,null,null,null,cgaletA,cgaletB,     /* 789:;<=>?:AB */
  cgaletC,cgaletD,cgaletE,cgaletF,cgaletG,cgaletH,cgaletI,        /* CDEFGHI */
  cgaletJ,cgaletK,cgaletL,cgaletM,cgaletN,cgaletO,cgaletP,        /* JKLMNOP */
  cgaletQ,cgaletR,cgaletS,cgaletT,cgaletU,cgaletV,cgaletW,        /* QRSTUVW */
  cgaletX,cgaletY,cgaletZ,null,null,null,null,cgasymline,null,cgaletA,        /* XYZ[\]^_`a */
  cgaletB,cgaletC,cgaletD,cgaletE,cgaletF,cgaletG,cgaletH,        /* bcdefgh */
  cgaletI,cgaletJ,cgaletK,cgaletL,cgaletM,cgaletN,cgaletO,        /* ijklmno */
  cgaletP,cgaletQ,cgaletR,cgaletS,cgaletT,cgaletU,cgaletV,        /* pqrstuv */
  cgaletW,cgaletX,cgaletY,cgaletZ,null,null,null,null ]                      /* wxyz{|}~ */

}  
  
}());


var cgagrafx = (function() { 

var cgazero60 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00];
var cgaediggermask = [
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03];
var cgardigger1 = [
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0x00,0x00,
  0x00,0x3f,0xc0,0x00,
  0x00,0x30,0xc0,0x00,
  0x00,0x30,0xc0,0x00,
  0x00,0x30,0xc0,0x00,
  0x02,0xaa,0xa1,0x55,
  0x0a,0xaa,0xa5,0x55,
  0x2a,0xaa,0xa5,0x00,
  0x82,0xaa,0xa5,0x55,
  0x3c,0xa8,0x21,0x55,
  0xc3,0x23,0xc0,0x00,
  0xc3,0x0c,0x30,0x00,
  0x3c,0x0c,0x30,0x00,
  0x00,0x03,0xc0,0x00];
var cgardigger1mask = [
  0xff,0xf0,0xff,0xff,
  0xff,0xc0,0x3f,0xff,
  0xff,0x00,0x0f,0xff,
  0xff,0x00,0x0f,0xff,
  0xff,0x00,0x0f,0xff,
  0xfc,0x00,0x0c,0x00,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x0c,0x00,
  0x00,0x00,0x03,0xff,
  0x00,0xc0,0x03,0xff,
  0xc3,0xf0,0x0f,0xff];
var cgardigger2 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0x00,0x00,
  0x00,0x3f,0xc0,0x00,
  0x00,0x30,0xc0,0x00,
  0x00,0x30,0xc0,0x54,
  0x02,0xaa,0xa5,0x54,
  0x0a,0xaa,0xa5,0x40,
  0x2a,0xaa,0xa5,0x00,
  0xaa,0xa8,0x25,0x40,
  0x82,0xa3,0xc5,0x54,
  0x3c,0x8c,0x30,0x54,
  0xc3,0x0c,0x30,0x00,
  0xc3,0x03,0xc0,0x00,
  0x3c,0x00,0x00,0x00];
var cgardigger2mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0xff,0xff,
  0xff,0xc0,0x3f,0xff,
  0xff,0x00,0x0f,0xff,
  0xff,0x00,0x0f,0x03,
  0xfc,0x00,0x00,0x00,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x03,0x03,
  0x00,0x30,0x0f,0xff,
  0x00,0xfc,0x3f,0xff];
var cgardigger3 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0x00,0x00,
  0x00,0x3f,0xc0,0x50,
  0x00,0x30,0xc1,0x50,
  0x02,0xaa,0xa5,0x40,
  0x0a,0xaa,0xa5,0x00,
  0x2a,0xaa,0xa5,0x00,
  0x82,0xaa,0xa5,0x00,
  0x3c,0xa8,0x25,0x40,
  0xc3,0x23,0xc1,0x50,
  0xc3,0x0c,0x30,0x50,
  0x3c,0x0c,0x30,0x00,
  0x00,0x03,0xc0,0x00];
var cgardigger3mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0xff,0xff,
  0xff,0xc0,0x3f,0x0f,
  0xff,0x00,0x0c,0x03,
  0xfc,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0xc0,0x03,0x0f,
  0xc3,0xf0,0x0f,0xff];
var cgarxdigger1 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0x00,0x00,
  0x00,0x3f,0xc0,0x00,
  0x02,0xaa,0xa1,0x55,
  0x0a,0xaa,0xa5,0x55,
  0x2a,0xaa,0xa5,0x00,
  0x82,0xaa,0xa5,0x55,
  0x3c,0xa8,0x21,0x55,
  0xc3,0x23,0xc0,0x00,
  0xc3,0x0c,0x30,0x00,
  0x3c,0x0c,0x30,0x00,
  0x00,0x03,0xc0,0x00];
var cgarxdigger1mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0xff,0xff,
  0xff,0xc0,0x3f,0xff,
  0xfc,0x00,0x0c,0x00,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x0c,0x00,
  0x00,0x00,0x03,0xff,
  0x00,0xc0,0x03,0xff,
  0xc3,0xf0,0x0f,0xff];
var cgarxdigger2 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0x00,0x00,
  0x00,0x3f,0xc0,0x54,
  0x02,0xaa,0xa5,0x54,
  0x0a,0xaa,0xa5,0x40,
  0x2a,0xaa,0xa5,0x00,
  0xaa,0xa8,0x25,0x40,
  0x82,0xa3,0xc5,0x54,
  0x3c,0x8c,0x30,0x54,
  0xc3,0x0c,0x30,0x00,
  0xc3,0x03,0xc0,0x00,
  0x3c,0x00,0x00,0x00];
var cgarxdigger2mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0xff,0xff,
  0xff,0xc0,0x3f,0x03,
  0xfc,0x00,0x00,0x00,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x03,0x03,
  0x00,0x30,0x0f,0xff,
  0x00,0xfc,0x3f,0xff];
var cgarxdigger3 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0x00,0x50,
  0x00,0x3f,0xc1,0x50,
  0x02,0xaa,0xa5,0x40,
  0x0a,0xaa,0xa5,0x00,
  0x2a,0xaa,0xa5,0x00,
  0x82,0xaa,0xa5,0x00,
  0x3c,0xa8,0x25,0x40,
  0xc3,0x23,0xc1,0x50,
  0xc3,0x0c,0x30,0x50,
  0x3c,0x0c,0x30,0x00,
  0x00,0x03,0xc0,0x00];
var cgarxdigger3mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0xff,0x0f,
  0xff,0xc0,0x3c,0x03,
  0xfc,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0xc0,0x03,0x0f,
  0xc3,0xf0,0x0f,0xff];
var cgaudigger1 = [
  0x00,0x51,0x40,0x00,
  0x00,0x51,0x40,0x00,
  0x00,0x51,0x40,0x00,
  0x00,0x51,0x40,0x00,
  0x00,0x15,0x00,0x00,
  0x3c,0xaa,0x80,0x00,
  0xc3,0x2a,0xbf,0xc0,
  0xc3,0x2a,0x80,0xf0,
  0x3c,0xaa,0x80,0xf0,
  0x00,0xaa,0xbf,0xc0,
  0x00,0xaa,0x80,0x00,
  0x0f,0x2a,0x80,0x00,
  0x30,0xca,0x00,0x00,
  0x30,0xc8,0x00,0x00,
  0x0f,0x20,0x00,0x00];
var cgaudigger1mask = [
  0xfc,0x00,0x0f,0xff,
  0xfc,0x00,0x0f,0xff,
  0xfc,0x00,0x0f,0xff,
  0xfc,0x00,0x0f,0xff,
  0xc3,0x00,0x3f,0xff,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x3f,0xff,
  0x00,0x00,0xff,0xff,
  0xc0,0x03,0xff,0xff];
var cgaudigger2 = [
  0x01,0x40,0x50,0x00,
  0x01,0x40,0x50,0x00,
  0x01,0x51,0x50,0x00,
  0x01,0x55,0x50,0x00,
  0x00,0x55,0x40,0x00,
  0x0f,0x2a,0x80,0x00,
  0x30,0xca,0xbf,0x00,
  0x30,0xca,0x83,0xc0,
  0x0f,0x2a,0x83,0xc0,
  0x00,0x2a,0xbf,0x00,
  0x00,0xaa,0x80,0x00,
  0x3c,0xaa,0x80,0x00,
  0xc3,0x2a,0x00,0x00,
  0xc3,0x28,0x00,0x00,
  0x3c,0xa0,0x00,0x00];
var cgaudigger2mask = [
  0xf0,0x0c,0x03,0xff,
  0xf0,0x0c,0x03,0xff,
  0xf0,0x00,0x03,0xff,
  0xf0,0x00,0x03,0xff,
  0xf0,0x00,0x0f,0xff,
  0xc0,0x00,0x00,0xff,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0xff,
  0x00,0x00,0x0f,0xff,
  0x00,0x00,0x3f,0xff,
  0x00,0x03,0xff,0xff,
  0x00,0x0f,0xff,0xff];
var cgaudigger3 = [
  0x00,0x00,0x00,0x00,
  0x05,0x00,0x14,0x00,
  0x05,0x40,0x54,0x00,
  0x01,0x55,0x50,0x00,
  0x00,0x55,0x40,0x00,
  0x3c,0xaa,0x80,0x00,
  0xc3,0x2a,0xbc,0x00,
  0xc3,0x2a,0x8f,0x00,
  0x3c,0xaa,0x8f,0x00,
  0x00,0xaa,0xbc,0x00,
  0x00,0xaa,0x80,0x00,
  0x0f,0x2a,0x80,0x00,
  0x30,0xca,0x00,0x00,
  0x30,0xc8,0x00,0x00,
  0x0f,0x20,0x00,0x00];
var cgaudigger3mask = [
  0xf0,0xff,0xc3,0xff,
  0xc0,0x3f,0x00,0xff,
  0xc0,0x00,0x00,0xff,
  0xf0,0x00,0x03,0xff,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x03,0xff,
  0x00,0x00,0x00,0xff,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0xff,
  0xf0,0x00,0x03,0xff,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x3f,0xff,
  0x00,0x00,0xff,0xff,
  0xc0,0x03,0xff,0xff];
var cgauxdigger1 = [
  0x00,0x51,0x40,0x00,
  0x00,0x51,0x40,0x00,
  0x00,0x51,0x40,0x00,
  0x00,0x51,0x40,0x00,
  0x00,0x15,0x00,0x00,
  0x3c,0xaa,0x80,0x00,
  0xc3,0x2a,0xb0,0x00,
  0xc3,0x2a,0xbc,0x00,
  0x3c,0xaa,0xbc,0x00,
  0x00,0xaa,0xb0,0x00,
  0x00,0xaa,0x80,0x00,
  0x0f,0x2a,0x80,0x00,
  0x30,0xca,0x00,0x00,
  0x30,0xc8,0x00,0x00,
  0x0f,0x20,0x00,0x00];
var cgauxdigger1mask = [
  0xfc,0x00,0x0f,0xff,
  0xfc,0x00,0x0f,0xff,
  0xfc,0x00,0x0f,0xff,
  0xfc,0x00,0x0f,0xff,
  0xc3,0x00,0x3f,0xff,
  0x00,0x00,0x0f,0xff,
  0x00,0x00,0x03,0xff,
  0x00,0x00,0x00,0xff,
  0x00,0x00,0x00,0xff,
  0xc0,0x00,0x03,0xff,
  0xf0,0x00,0x0f,0xff,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x3f,0xff,
  0x00,0x00,0xff,0xff,
  0xc0,0x03,0xff,0xff];
var cgauxdigger2 = [
  0x01,0x40,0x50,0x00,
  0x01,0x40,0x50,0x00,
  0x01,0x51,0x50,0x00,
  0x01,0x55,0x50,0x00,
  0x00,0x55,0x40,0x00,
  0x0f,0x2a,0x80,0x00,
  0x30,0xca,0xb0,0x00,
  0x30,0xca,0xbc,0x00,
  0x0f,0x2a,0xbc,0x00,
  0x00,0x2a,0xb0,0x00,
  0x00,0xaa,0x80,0x00,
  0x3c,0xaa,0x80,0x00,
  0xc3,0x2a,0x00,0x00,
  0xc3,0x28,0x00,0x00,
  0x3c,0xa0,0x00,0x00];
var cgauxdigger2mask = [
  0xf0,0x0c,0x03,0xff,
  0xf0,0x0c,0x03,0xff,
  0xf0,0x00,0x03,0xff,
  0xf0,0x00,0x03,0xff,
  0xf0,0x00,0x0f,0xff,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x03,0xff,
  0x00,0x00,0x00,0xff,
  0xc0,0x00,0x00,0xff,
  0xf0,0x00,0x03,0xff,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x0f,0xff,
  0x00,0x00,0x3f,0xff,
  0x00,0x00,0xff,0xff,
  0x00,0x03,0xff,0xff];
var cgauxdigger3 = [
  0x00,0x00,0x00,0x00,
  0x05,0x00,0x14,0x00,
  0x05,0x40,0x54,0x00,
  0x01,0x55,0x50,0x00,
  0x00,0x55,0x40,0x00,
  0x3c,0xaa,0x80,0x00,
  0xc3,0x2a,0xb0,0x00,
  0xc3,0x2a,0xbc,0x00,
  0x3c,0xaa,0xbc,0x00,
  0x00,0xaa,0xb0,0x00,
  0x00,0xaa,0x80,0x00,
  0x0f,0x2a,0x80,0x00,
  0x30,0xca,0x00,0x00,
  0x30,0xc8,0x00,0x00,
  0x0f,0x20,0x00,0x00];
var cgauxdigger3mask = [
  0xf0,0xff,0xc3,0xff,
  0xc0,0x3f,0x00,0xff,
  0xc0,0x00,0x00,0xff,
  0xf0,0x00,0x03,0xff,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x0f,0xff,
  0x00,0x00,0x03,0xff,
  0x00,0x00,0x00,0xff,
  0x00,0x00,0x00,0xff,
  0xc0,0x00,0x03,0xff,
  0xf0,0x00,0x0f,0xff,
  0xc0,0x00,0x0f,0xff,
  0x00,0x00,0x3f,0xff,
  0x00,0x00,0xff,0xff,
  0xc0,0x03,0xff,0xff];
var cgaldigger1 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0xf0,0x00,
  0x00,0x03,0xfc,0x00,
  0x00,0x03,0x0c,0x00,
  0x00,0x03,0x0c,0x00,
  0x00,0x03,0x0c,0x00,
  0x55,0x4a,0xaa,0x80,
  0x55,0x5a,0xaa,0xa0,
  0x00,0x5a,0xaa,0xa8,
  0x55,0x5a,0xaa,0x82,
  0x55,0x48,0x2a,0x3c,
  0x00,0x03,0xc8,0xc3,
  0x00,0x0c,0x30,0xc3,
  0x00,0x0c,0x30,0x3c,
  0x00,0x03,0xc0,0x00];
var cgaldigger1mask = [
  0xff,0xff,0x0f,0xff,
  0xff,0xfc,0x03,0xff,
  0xff,0xf0,0x00,0xff,
  0xff,0xf0,0x00,0xff,
  0xff,0xf0,0x00,0xff,
  0x00,0x30,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x30,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xc0,0x03,0x00,
  0xff,0xf0,0x0f,0xc3];
var cgaldigger2 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0xf0,0x00,
  0x00,0x03,0xfc,0x00,
  0x00,0x03,0x0c,0x00,
  0x15,0x43,0x0c,0x00,
  0x15,0x5a,0xaa,0x80,
  0x01,0x5a,0xaa,0xa0,
  0x00,0x5a,0xaa,0xa8,
  0x01,0x58,0x2a,0xaa,
  0x15,0x53,0xc2,0x82,
  0x15,0x4c,0x30,0x3c,
  0x00,0x0c,0x30,0xc3,
  0x00,0x03,0xc0,0xc3,
  0x00,0x00,0x00,0x3c];
var cgaldigger2mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0x0f,0xff,
  0xff,0xfc,0x03,0xff,
  0xff,0xf0,0x00,0xff,
  0xc0,0x30,0x00,0xff,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xff,0xf0,0x0c,0x00,
  0xff,0xfc,0x3f,0x00];
var cgaldigger3 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0xf0,0x00,
  0x05,0x03,0xfc,0x00,
  0x05,0x43,0x0c,0x00,
  0x01,0x5a,0xaa,0x80,
  0x00,0x5a,0xaa,0xa0,
  0x00,0x5a,0xaa,0xa8,
  0x00,0x5a,0xaa,0x82,
  0x01,0x58,0x2a,0x3c,
  0x05,0x43,0xc8,0xc3,
  0x05,0x0c,0x30,0xc3,
  0x00,0x0c,0x30,0x3c,
  0x00,0x03,0xc0,0x00];
var cgaldigger3mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0x0f,0xff,
  0xf0,0xfc,0x03,0xff,
  0xc0,0x30,0x00,0xff,
  0xc0,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x00,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xf0,0xc0,0x03,0x00,
  0xff,0xf0,0x0f,0xc3];
var cgalxdigger1 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0xf0,0x00,
  0x00,0x03,0xfc,0x00,
  0x55,0x4a,0xaa,0x80,
  0x55,0x5a,0xaa,0xa0,
  0x00,0x5a,0xaa,0xa8,
  0x55,0x5a,0xaa,0x82,
  0x55,0x48,0x2a,0x3c,
  0x00,0x03,0xc8,0xc3,
  0x00,0x0c,0x30,0xc3,
  0x00,0x0c,0x30,0x3c,
  0x00,0x03,0xc0,0x00];
var cgalxdigger1mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0x0f,0xff,
  0xff,0xfc,0x03,0xff,
  0x00,0x30,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x30,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xc0,0x03,0x00,
  0xff,0xf0,0x0f,0xc3];
var cgalxdigger2 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0xf0,0x00,
  0x15,0x43,0xfc,0x00,
  0x15,0x5a,0xaa,0x80,
  0x01,0x5a,0xaa,0xa0,
  0x00,0x5a,0xaa,0xa8,
  0x01,0x58,0x2a,0xaa,
  0x15,0x53,0xc2,0x82,
  0x15,0x4c,0x30,0x3c,
  0x00,0x0c,0x30,0xc3,
  0x00,0x03,0xc0,0xc3,
  0x00,0x00,0x00,0x3c];
var cgalxdigger2mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0x0f,0xff,
  0xc0,0x3c,0x03,0xff,
  0x00,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xff,0xf0,0x0c,0x00,
  0xff,0xfc,0x3f,0x00];
var cgalxdigger3 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x05,0x00,0xf0,0x00,
  0x05,0x43,0xfc,0x00,
  0x01,0x5a,0xaa,0x80,
  0x00,0x5a,0xaa,0xa0,
  0x00,0x5a,0xaa,0xa8,
  0x00,0x5a,0xaa,0x82,
  0x01,0x58,0x2a,0x3c,
  0x05,0x43,0xc8,0xc3,
  0x05,0x0c,0x30,0xc3,
  0x00,0x0c,0x30,0x3c,
  0x00,0x03,0xc0,0x00];
var cgalxdigger3mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xf0,0xff,0x0f,0xff,
  0xc0,0x3c,0x03,0xff,
  0xc0,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x00,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xf0,0xc0,0x03,0x00,
  0xff,0xf0,0x0f,0xc3];
var cgaddigger1 = [
  0x00,0x00,0x08,0xf0,
  0x00,0x00,0x23,0x0c,
  0x00,0x00,0xa3,0x0c,
  0x00,0x02,0xa8,0xf0,
  0x00,0x02,0xaa,0x00,
  0x03,0xfe,0xaa,0x00,
  0x0f,0x02,0xaa,0x3c,
  0x0f,0x02,0xa8,0xc3,
  0x03,0xfe,0xa8,0xc3,
  0x00,0x02,0xaa,0x3c,
  0x00,0x00,0x54,0x00,
  0x00,0x01,0x55,0x00,
  0x00,0x01,0x45,0x00,
  0x00,0x01,0x45,0x00,
  0x00,0x01,0x45,0x00];
var cgaddigger1mask = [
  0xff,0xff,0xc0,0x03,
  0xff,0xff,0x00,0x00,
  0xff,0xfc,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xfc,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xf0,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x00,
  0xff,0xfc,0x00,0xc3,
  0xff,0xf0,0x00,0x3f,
  0xff,0xf0,0x00,0x3f,
  0xff,0xf0,0x00,0x3f,
  0xff,0xf0,0x00,0x3f];
var cgaddigger2 = [
  0x00,0x00,0x0a,0x3c,
  0x00,0x00,0x28,0xc3,
  0x00,0x00,0xa8,0xc3,
  0x00,0x02,0xaa,0x3c,
  0x00,0x02,0xaa,0x00,
  0x00,0xfe,0xa8,0x00,
  0x03,0xc2,0xa8,0xf0,
  0x03,0xc2,0xa3,0x0c,
  0x00,0xfe,0xa3,0x0c,
  0x00,0x02,0xa8,0xf0,
  0x00,0x01,0x54,0x00,
  0x00,0x05,0x45,0x40,
  0x00,0x05,0x01,0x40,
  0x00,0x05,0x01,0x40,
  0x00,0x05,0x01,0x40];
var cgaddigger2mask = [
  0xff,0xff,0xc0,0x00,
  0xff,0xff,0x00,0x00,
  0xff,0xfc,0x00,0x00,
  0xff,0xf0,0x00,0x00,
  0xff,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x00,
  0xff,0x00,0x00,0x03,
  0xff,0xf0,0x00,0x0f,
  0xff,0xc0,0x00,0x0f,
  0xff,0xc0,0x30,0x0f,
  0xff,0xc0,0x30,0x0f,
  0xff,0xc0,0x30,0x0f];
var cgaddigger3 = [
  0x00,0x00,0x08,0xf0,
  0x00,0x00,0x23,0x0c,
  0x00,0x00,0xa3,0x0c,
  0x00,0x02,0xa8,0xf0,
  0x00,0x02,0xaa,0x00,
  0x00,0x3e,0xaa,0x00,
  0x00,0xf2,0xaa,0x3c,
  0x00,0xf2,0xa8,0xc3,
  0x00,0x3e,0xa8,0xc3,
  0x00,0x02,0xaa,0x3c,
  0x00,0x01,0x55,0x00,
  0x00,0x05,0x55,0x40,
  0x00,0x15,0x01,0x50,
  0x00,0x14,0x00,0x50,
  0x00,0x00,0x00,0x00];
var cgaddigger3mask = [
  0xff,0xff,0xc0,0x03,
  0xff,0xff,0x00,0x00,
  0xff,0xfc,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xff,0xc0,0x00,0x0f,
  0xff,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x00,
  0xff,0x00,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xff,0xc0,0x00,0x0f,
  0xff,0x00,0x00,0x03,
  0xff,0x00,0xfc,0x03,
  0xff,0xc3,0xff,0x0f];
var cgadxdigger1 = [
  0x00,0x00,0x08,0xf0,
  0x00,0x00,0x23,0x0c,
  0x00,0x00,0xa3,0x0c,
  0x00,0x02,0xa8,0xf0,
  0x00,0x02,0xaa,0x00,
  0x00,0x0e,0xaa,0x00,
  0x00,0x3e,0xaa,0x3c,
  0x00,0x3e,0xa8,0xc3,
  0x00,0x0e,0xa8,0xc3,
  0x00,0x02,0xaa,0x3c,
  0x00,0x00,0x54,0x00,
  0x00,0x01,0x55,0x00,
  0x00,0x01,0x45,0x00,
  0x00,0x01,0x45,0x00,
  0x00,0x01,0x45,0x00];
var cgadxdigger1mask = [
  0xff,0xff,0xc0,0x03,
  0xff,0xff,0x00,0x00,
  0xff,0xfc,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xff,0xf0,0x00,0x0f,
  0xff,0xc0,0x00,0x03,
  0xff,0x00,0x00,0x00,
  0xff,0x00,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xf0,0x00,0x00,
  0xff,0xfc,0x00,0xc3,
  0xff,0xf0,0x00,0x3f,
  0xff,0xf0,0x00,0x3f,
  0xff,0xf0,0x00,0x3f,
  0xff,0xf0,0x00,0x3f];
var cgadxdigger2 = [
  0x00,0x00,0x0a,0x3c,
  0x00,0x00,0x28,0xc3,
  0x00,0x00,0xa8,0xc3,
  0x00,0x02,0xaa,0x3c,
  0x00,0x02,0xaa,0x00,
  0x00,0x0e,0xa8,0x00,
  0x00,0x3e,0xa8,0xf0,
  0x00,0x3e,0xa3,0x0c,
  0x00,0x0e,0xa3,0x0c,
  0x00,0x02,0xa8,0xf0,
  0x00,0x01,0x54,0x00,
  0x00,0x05,0x45,0x40,
  0x00,0x05,0x01,0x40,
  0x00,0x05,0x01,0x40,
  0x00,0x05,0x01,0x40];
var cgadxdigger2mask = [
  0xff,0xff,0xc0,0x00,
  0xff,0xff,0x00,0x00,
  0xff,0xfc,0x00,0x00,
  0xff,0xf0,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xff,0xc0,0x00,0x0f,
  0xff,0x00,0x00,0x03,
  0xff,0x00,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xff,0xf0,0x00,0x0f,
  0xff,0xc0,0x00,0x0f,
  0xff,0xc0,0x30,0x0f,
  0xff,0xc0,0x30,0x0f,
  0xff,0xc0,0x30,0x0f];
var cgadxdigger3 = [
  0x00,0x00,0x08,0xf0,
  0x00,0x00,0x23,0x0c,
  0x00,0x00,0xa3,0x0c,
  0x00,0x02,0xa8,0xf0,
  0x00,0x02,0xaa,0x00,
  0x00,0x0e,0xaa,0x00,
  0x00,0x3e,0xaa,0x3c,
  0x00,0x3e,0xa8,0xc3,
  0x00,0x0e,0xa8,0xc3,
  0x00,0x02,0xaa,0x3c,
  0x00,0x01,0x55,0x00,
  0x00,0x05,0x55,0x40,
  0x00,0x15,0x01,0x50,
  0x00,0x14,0x00,0x50,
  0x00,0x00,0x00,0x00];
var cgadxdigger3mask = [
  0xff,0xff,0xc0,0x03,
  0xff,0xff,0x00,0x00,
  0xff,0xfc,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xff,0xf0,0x00,0x0f,
  0xff,0xc0,0x00,0x03,
  0xff,0x00,0x00,0x00,
  0xff,0x00,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xf0,0x00,0x00,
  0xff,0xf0,0x00,0x03,
  0xff,0xc0,0x00,0x0f,
  0xff,0x00,0x00,0x03,
  0xff,0x00,0xfc,0x03,
  0xff,0xc3,0xff,0x0f];
var cgadiggerd = [
  0x00,0x00,0x00,0x00,
  0x00,0x03,0xc0,0x3c,
  0x00,0x0f,0x30,0xff,
  0x00,0x0f,0xf0,0xf3,
  0x05,0x43,0xca,0x3c,
  0x55,0x58,0x2a,0x82,
  0x50,0x5a,0xaa,0xa8,
  0x05,0x5a,0xaa,0xa0,
  0x55,0x4a,0xaa,0x80,
  0x50,0x03,0x0f,0x00,
  0x00,0x00,0xcc,0x00,
  0x00,0x03,0x0f,0x00,
  0x00,0x00,0xff,0x00,
  0x00,0x00,0x3c,0x00,
  0x00,0x00,0x00,0x00];
var cgadiggerdmask = [
  0xff,0xfc,0x3f,0xc3,
  0xff,0xf0,0x0f,0x00,
  0xff,0xc0,0x00,0x00,
  0xf0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x0f,
  0x00,0x30,0x00,0x3f,
  0x0f,0xf0,0x00,0x3f,
  0xff,0xf0,0x00,0x3f,
  0xff,0xfc,0x00,0x3f,
  0xff,0xff,0x00,0xff,
  0xff,0xff,0xc3,0xff];
var cgagrave1 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x05,0x40,0x00,
  0x00,0x5f,0xd4,0x00,
  0x05,0xff,0xfd,0x40,
  0x07,0xff,0xff,0x40,
  0x00,0x00,0x00,0x00];
var cgagrave1mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0x3f,0xff,
  0xff,0x00,0x03,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03];
var cgagrave2 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x05,0x40,0x00,
  0x00,0x5f,0xd4,0x00,
  0x05,0xff,0xfd,0x40,
  0x07,0xff,0xff,0x40,
  0x10,0x0f,0xff,0xd0,
  0x13,0xcc,0xff,0xd0,
  0x00,0x00,0x00,0x00];
var cgagrave2mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0x3f,0xff,
  0xff,0x00,0x03,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03];
var cgagrave3 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x05,0x40,0x00,
  0x00,0x5f,0xd4,0x00,
  0x05,0xff,0xfd,0x40,
  0x07,0xff,0xff,0x40,
  0x10,0x0f,0xff,0xd0,
  0x13,0xcc,0xff,0xd0,
  0x10,0x0c,0xc0,0x10,
  0x10,0xfc,0xcf,0x10,
  0x00,0x00,0x00,0x00];
var cgagrave3mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0x3f,0xff,
  0xff,0x00,0x03,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03];
var cgagrave4 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x05,0x40,0x00,
  0x00,0x5f,0xd4,0x00,
  0x05,0xff,0xfd,0x40,
  0x07,0xff,0xff,0x40,
  0x10,0x0f,0xff,0xd0,
  0x13,0xcc,0xff,0xd0,
  0x10,0x0c,0xc0,0x10,
  0x10,0xfc,0xcf,0x10,
  0x13,0x3c,0xc0,0x10,
  0x13,0xcc,0xcf,0xd0,
  0x1f,0xfc,0xcf,0xd0,
  0x00,0x00,0x00,0x00];
var cgagrave4mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xf0,0x3f,0xff,
  0xff,0x00,0x03,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03];
var cgagrave5 = [
  0x00,0x00,0x00,0x00,
  0x00,0x05,0x40,0x00,
  0x00,0x5f,0xd4,0x00,
  0x05,0xff,0xfd,0x40,
  0x07,0xff,0xff,0x40,
  0x10,0x0f,0xff,0xd0,
  0x13,0xcc,0xff,0xd0,
  0x10,0x0c,0xc0,0x10,
  0x10,0xfc,0xcf,0x10,
  0x13,0x3c,0xc0,0x10,
  0x13,0xcc,0xcf,0xd0,
  0x1f,0xfc,0xcf,0xd0,
  0x1f,0xff,0xcf,0xd0,
  0x1f,0xff,0xff,0xd0,
  0x1f,0xff,0xff,0xd0];
var cgagrave5mask = [
  0xff,0xf0,0x3f,0xff,
  0xff,0x00,0x03,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03];

var cgasbag = [
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0xf0,0x00,
  0x00,0x03,0xc0,0x00,
  0x00,0x0f,0xf0,0x00,
  0x00,0xff,0xff,0x00,
  0x03,0xfc,0x3f,0xc0,
  0x0f,0x00,0x00,0xf0,
  0x3c,0x3c,0x3f,0xfc,
  0x3c,0x00,0x00,0x3c,
  0x3f,0xfc,0x3c,0x3c,
  0x3c,0x3c,0x3c,0x3c,
  0x3f,0x00,0x00,0xfc,
  0x0f,0xfc,0x3f,0xf0,
  0x00,0xff,0xff,0x00,
  0x00,0x00,0x00,0x00];
var cgasbagmask = [
  0xff,0xc0,0x03,0xff,
  0xff,0xc0,0x03,0xff,
  0xff,0xf0,0x0f,0xff,
  0xff,0x00,0x00,0xff,
  0xfc,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xff,0x00,0x00,0xff];
var cgarbag = [
  0x00,0x00,0x00,0x00,
  0x00,0x03,0xfc,0x00,
  0x00,0x00,0xf0,0x00,
  0x00,0x0f,0xfc,0x00,
  0x00,0x3f,0xff,0x00,
  0x00,0xff,0x0f,0xc0,
  0x03,0xc0,0x00,0x30,
  0x0f,0x0f,0x0f,0xfc,
  0x0f,0x00,0x00,0x0c,
  0x0f,0xff,0x0f,0x0c,
  0x0f,0x0f,0x0f,0x0c,
  0x03,0xc0,0x00,0x30,
  0x00,0xff,0x0f,0xc0,
  0x00,0x0f,0xfc,0x00,
  0x00,0x00,0x00,0x00];
var cgarbagmask = [
  0xff,0xfc,0x03,0xff,
  0xff,0xf0,0x00,0xff,
  0xff,0xf0,0x03,0xff,
  0xff,0xc0,0x00,0xff,
  0xff,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xf0,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x0f,
  0xff,0x00,0x00,0x3f,
  0xff,0xf0,0x03,0xff];
var cgalbag = [
  0x00,0x00,0x00,0x00,
  0x00,0x3f,0xc0,0x00,
  0x00,0x0f,0x00,0x00,
  0x00,0x3f,0xc0,0x00,
  0x00,0xff,0xfc,0x00,
  0x03,0xf0,0xff,0x00,
  0x0c,0x00,0x03,0xc0,
  0x30,0xf0,0xff,0xf0,
  0x30,0x00,0x00,0xf0,
  0x3f,0xf0,0xf0,0xf0,
  0x30,0xf0,0xf0,0xf0,
  0x3c,0x00,0x03,0xc0,
  0x0f,0xf0,0xff,0x00,
  0x00,0xff,0xf0,0x00,
  0x00,0x00,0x00,0x00];
var cgalbagmask = [
  0xff,0xc0,0x3f,0xff,
  0xff,0x00,0x0f,0xff,
  0xff,0xc0,0x3f,0xff,
  0xff,0x00,0x03,0xff,
  0xfc,0x00,0x00,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0xff,
  0xff,0x00,0x0f,0xff];
var cgafbag = [
  0x00,0x0c,0x30,0x00,
  0x00,0x03,0xc0,0x00,
  0x00,0x03,0xc0,0x00,
  0x00,0x0f,0xf0,0x00,
  0x00,0x3f,0xfc,0x00,
  0x00,0xfc,0x3f,0x00,
  0x03,0x00,0x00,0xc0,
  0x0c,0x3c,0x3f,0xf0,
  0x0c,0x00,0x00,0x30,
  0x0f,0xfc,0x3c,0x30,
  0x0c,0x3c,0x3c,0x30,
  0x03,0x00,0x00,0xc0,
  0x00,0xfc,0x3f,0x00,
  0x00,0x3f,0xfc,0x00,
  0x00,0x03,0xc0,0x00];
var cgafbagmask = [
  0xff,0xc0,0x03,0xff,
  0xff,0xf0,0x0f,0xff,
  0xff,0xf0,0x0f,0xff,
  0xff,0xc0,0x03,0xff,
  0xff,0x00,0x00,0xff,
  0xfc,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x3f,
  0xff,0x00,0x00,0xff,
  0xff,0xc0,0x03,0xff];
var cgagold1 = [
  0x00,0x00,0x00,0x00,
  0x00,0x03,0xc0,0x00,
  0x00,0x0f,0xf0,0x00,
  0x00,0xf3,0xf0,0x00,
  0x03,0xfc,0xcc,0x00,
  0x0f,0xff,0x3f,0x00,
  0x0f,0xff,0x3f,0xc0,
  0x03,0xfc,0xff,0xc0,
  0x00,0xf0,0xff,0x00,
  0x03,0x0f,0x00,0x00,
  0x0f,0xf3,0x3c,0x00,
  0x3f,0xfc,0xff,0x00,
  0x3f,0xfc,0xff,0xc0,
  0x0f,0xf3,0xff,0xc0,
  0x03,0xcc,0xff,0x00];
var cgagold1mask = [
  0xff,0xfc,0x3f,0xff,
  0xff,0xf0,0x0f,0xff,
  0xff,0x00,0x03,0xff,
  0xfc,0x00,0x03,0xff,
  0xf0,0x00,0x00,0xff,
  0xc0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0xff,
  0xc0,0x00,0x00,0xff,
  0xc0,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x3f];
var cgagold2 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x0f,0x00,
  0x00,0xf0,0x3f,0xc0,
  0x03,0xfc,0xff,0xf0,
  0x0f,0xff,0x3f,0xf0,
  0x0f,0xff,0x0f,0xc0,
  0x03,0xfc,0xf3,0x00,
  0x00,0xf3,0xfc,0x00,
  0x0f,0x0f,0xf3,0x00,
  0x3f,0xc3,0xcf,0xc0,
  0x3f,0xf0,0x3f,0xf0,
  0x0f,0xf3,0x3f,0xf0,
  0x03,0xcf,0xcf,0xc0];
var cgagold2mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xf0,0xff,
  0xff,0x0f,0xc0,0x3f,
  0xfc,0x03,0x00,0x0f,
  0xf0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0xff,
  0xc0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f];
var cgagold3 = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x03,0xc0,0x03,0xc0,
  0x0f,0xf3,0xcf,0xf0,
  0x3f,0xfc,0xf3,0xfc,
  0x3f,0xfc,0xfc,0xfc,
  0x0f,0xf0,0xfc,0x00,
  0x03,0xc3,0xf3,0xf0,
  0x3c,0x30,0x0f,0xfc,
  0x3f,0xf3,0xcf,0xfc,
  0x0f,0xcf,0xf3,0xf0];
var cgagold3mask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xfc,0x3f,0xfc,0x3f,
  0xf0,0x0c,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03];

var cganobbin1 = [
  0x00,0x00,0x00,0x00,
  0x03,0xf0,0x0f,0xc0,
  0x0f,0xfd,0x7f,0xf0,
  0x0c,0x3d,0x70,0xf0,
  0x0c,0x3d,0x70,0xf0,
  0x03,0xf5,0x5f,0xc0,
  0x00,0x55,0x55,0x00,
  0x00,0x15,0x54,0x00,
  0x02,0x84,0x12,0x80,
  0x0a,0x05,0x50,0xa0,
  0x0a,0x01,0x40,0xa0,
  0x0a,0x00,0x02,0xa8,
  0x0a,0x00,0x0a,0xaa,
  0x2a,0x80,0x00,0x00,
  0xaa,0xa0,0x00,0x00];
var cganobbin1mask = [
  0xfc,0x0f,0xf0,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x30,0x0c,0x03,
  0xc0,0x3c,0x30,0x00,
  0xc0,0x3f,0xc0,0x00,
  0x00,0x0f,0xf0,0x00,
  0x00,0x03,0xff,0xff];
var cganobbin2 = [
  0x00,0x00,0x00,0x00,
  0x03,0xf0,0x0f,0xc0,
  0x0f,0xfd,0x7f,0xf0,
  0x0f,0x0d,0x7c,0x30,
  0x0f,0x0d,0x7c,0x30,
  0x03,0xf5,0x5f,0xc0,
  0x00,0x55,0x55,0x00,
  0x00,0x14,0x14,0x00,
  0x02,0x84,0x12,0x80,
  0x0a,0x05,0x50,0xa0,
  0x0a,0x01,0x40,0xa0,
  0x0a,0x00,0x00,0xa0,
  0x2a,0x80,0x02,0xa8,
  0xaa,0xa0,0x0a,0xaa,
  0x00,0x00,0x00,0x00];
var cganobbin2mask = [
  0xfc,0x0f,0xf0,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x30,0x0c,0x03,
  0xc0,0x3c,0x3c,0x03,
  0x00,0x3f,0xf0,0x00,
  0x00,0x0f,0xc0,0x00,
  0x00,0x0f,0xf0,0x00];
var cganobbin3 = [
  0x00,0x00,0x00,0x00,
  0x03,0xf0,0x0f,0xc0,
  0x0f,0x0d,0x7c,0x30,
  0x0f,0x0d,0x7c,0x30,
  0x0f,0xfd,0x7f,0xf0,
  0x03,0xf5,0x5f,0xc0,
  0x00,0x54,0x15,0x00,
  0x00,0x14,0x14,0x00,
  0x02,0x84,0x12,0x80,
  0x0a,0x04,0x10,0xa0,
  0x0a,0x01,0x40,0xa0,
  0x2a,0x80,0x00,0xa0,
  0xaa,0xa0,0x00,0xa0,
  0x00,0x00,0x02,0xa8,
  0x00,0x00,0x0a,0xaa];
var cganobbin3mask = [
  0xfc,0x0f,0xf0,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x30,0x0c,0x03,
  0x00,0x0c,0x3c,0x03,
  0x00,0x03,0xfc,0x03,
  0x00,0x0f,0xf0,0x00,
  0xff,0xff,0xc0,0x00];
var cganobbind = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x03,0xf0,0x0f,0xc0,
  0x0c,0x3d,0x7c,0x30,
  0x0c,0x3d,0x7c,0x30,
  0x0f,0xfd,0x7f,0xf0,
  0x03,0xf5,0x5f,0xc0,
  0x00,0x54,0x15,0x00,
  0x00,0x14,0x14,0x00,
  0x02,0x84,0x12,0x80,
  0x0a,0x04,0x10,0xa0,
  0x2a,0x81,0x42,0xa8,
  0xaa,0xa0,0x0a,0xaa,
  0x00,0x00,0x00,0x00];
var cganobbindmask = [
  0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,
  0xfc,0x0f,0xf0,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x0f,0xf0,0x00];
var cgarhobbin1 = [
  0x00,0x4f,0xc4,0x00,
  0x01,0x3f,0xf1,0x00,
  0x05,0x30,0xf1,0x00,
  0x15,0x30,0xf1,0x40,
  0x15,0x4f,0xc5,0x50,
  0x15,0x50,0x15,0x54,
  0x05,0x55,0x6a,0xa0,
  0x01,0x55,0x80,0x00,
  0x00,0x55,0x6a,0xa0,
  0x00,0x15,0x55,0x40,
  0x00,0x02,0x80,0x00,
  0x00,0x02,0x80,0x00,
  0x00,0x02,0x80,0x00,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00];
var cgarhobbin1mask = [
  0xfc,0x00,0x00,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x03,
  0xff,0x00,0x00,0x0f,
  0xff,0xc0,0x00,0x3f,
  0xff,0xf0,0x0f,0xff,
  0xff,0xf0,0x0f,0xff,
  0xff,0xc0,0x03,0xff,
  0xff,0x00,0x00,0xff];
var cgarhobbin2 = [
  0x00,0x4f,0xc4,0x00,
  0x01,0x3f,0xf1,0x00,
  0x05,0x3c,0x31,0x40,
  0x15,0x3c,0x31,0x50,
  0x15,0x4f,0xc5,0x54,
  0x15,0x50,0x15,0xa8,
  0x05,0x55,0x6a,0x00,
  0x01,0x55,0x80,0x00,
  0x00,0x55,0x68,0x00,
  0x00,0x15,0x56,0xa0,
  0x00,0x02,0x81,0x50,
  0x00,0x02,0x80,0x00,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00,
  0x00,0x00,0x00,0x00];
var cgarhobbin2mask = [
  0xfc,0x00,0x00,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0xff,
  0xfc,0x00,0x00,0x0f,
  0xff,0x00,0x00,0x03,
  0xff,0xc0,0x00,0x0f,
  0xff,0xf0,0x0c,0x3f,
  0xff,0xc0,0x03,0xff,
  0xff,0x00,0x00,0xff,
  0xff,0xc0,0x03,0xff];
var cgarhobbin3 = [
  0x00,0x4f,0xc4,0x00,
  0x01,0x3c,0x31,0x00,
  0x05,0x3c,0x31,0x40,
  0x15,0x3f,0xf1,0x50,
  0x15,0x4f,0xc5,0x68,
  0x15,0x50,0x16,0x80,
  0x05,0x55,0x68,0x00,
  0x01,0x55,0x80,0x00,
  0x00,0x55,0x68,0x00,
  0x00,0x15,0x56,0x80,
  0x00,0x02,0x81,0x60,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00];
var cgarhobbin3mask = [
  0xfc,0x00,0x00,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x3f,
  0xf0,0x00,0x03,0xff,
  0xfc,0x00,0x00,0x3f,
  0xff,0x00,0x00,0x03,
  0xff,0xc0,0x00,0x03,
  0xff,0xc0,0x00,0x0f,
  0xff,0x00,0x00,0xff,
  0xff,0xc0,0x03,0xff,
  0xff,0xff,0xff,0xff];
var cgarhobbind = [
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x4f,0xc4,0x00,
  0x01,0x3c,0x31,0x00,
  0x05,0x3c,0x31,0x40,
  0x15,0x3f,0xf1,0x50,
  0x15,0x4f,0xc5,0x68,
  0x15,0x50,0x16,0x80,
  0x05,0x55,0x68,0x00,
  0x01,0x55,0xa8,0x00,
  0x00,0x55,0x5a,0x80,
  0x00,0x15,0x55,0xa8,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00,
  0x00,0x00,0x00,0x00];
var cgarhobbindmask = [
  0xff,0xff,0xff,0xff,
  0xff,0x00,0x03,0xff,
  0xfc,0x00,0x00,0xff,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x3f,
  0xf0,0x00,0x03,0xff,
  0xfc,0x00,0x00,0x3f,
  0xff,0x00,0x00,0x03,
  0xff,0xc0,0x00,0x03,
  0xff,0x00,0x00,0xff,
  0xff,0xc0,0x03,0xff];
var cgalhobbin1 = [
  0x00,0x13,0xf1,0x00,
  0x00,0x4f,0xfc,0x40,
  0x00,0x4f,0x0c,0x50,
  0x01,0x4f,0x0c,0x54,
  0x05,0x53,0xf1,0x54,
  0x15,0x54,0x05,0x54,
  0x0a,0xa9,0x55,0x50,
  0x00,0x02,0x55,0x40,
  0x0a,0xa9,0x55,0x00,
  0x01,0x55,0x54,0x00,
  0x00,0x02,0x80,0x00,
  0x00,0x02,0x80,0x00,
  0x00,0x02,0x80,0x00,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00];
var cgalhobbin1mask = [
  0xff,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03,
  0xf0,0x00,0x00,0x0f,
  0xc0,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0xff,
  0xfc,0x00,0x03,0xff,
  0xff,0xf0,0x0f,0xff,
  0xff,0xf0,0x0f,0xff,
  0xff,0xc0,0x03,0xff,
  0xff,0x00,0x00,0xff];
var cgalhobbin2 = [
  0x00,0x13,0xf1,0x00,
  0x00,0x4f,0xfc,0x40,
  0x01,0x4c,0x3c,0x50,
  0x05,0x4c,0x3c,0x54,
  0x15,0x53,0xf1,0x54,
  0x2a,0x54,0x05,0x54,
  0x00,0xa9,0x55,0x50,
  0x00,0x02,0x55,0x40,
  0x00,0x29,0x55,0x00,
  0x0a,0x95,0x54,0x00,
  0x05,0x42,0x80,0x00,
  0x00,0x02,0x80,0x00,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00,
  0x00,0x00,0x00,0x00];
var cgalhobbin2mask = [
  0xff,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03,
  0xff,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0xff,
  0xf0,0x00,0x03,0xff,
  0xfc,0x30,0x0f,0xff,
  0xff,0xc0,0x03,0xff,
  0xff,0x00,0x00,0xff,
  0xff,0xc0,0x03,0xff];
var cgalhobbin3 = [
  0x00,0x13,0xf1,0x00,
  0x00,0x4c,0x3c,0x40,
  0x01,0x4c,0x3c,0x50,
  0x05,0x4f,0xfc,0x54,
  0x29,0x53,0xf1,0x54,
  0x02,0x94,0x05,0x54,
  0x00,0x29,0x55,0x50,
  0x00,0x02,0x55,0x40,
  0x00,0x29,0x55,0x00,
  0x02,0x95,0x54,0x00,
  0x09,0x42,0x80,0x00,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00];
var cgalhobbin3mask = [
  0xff,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x03,
  0xff,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0xff,
  0xf0,0x00,0x03,0xff,
  0xfc,0x00,0x03,0xff,
  0xff,0x00,0x00,0xff,
  0xff,0xc0,0x03,0xff,
  0xff,0xff,0xff,0xff];
var cgalhobbind = [
  0x00,0x00,0x00,0x00,
  0x00,0x13,0xf1,0x00,
  0x00,0x4c,0x3c,0x40,
  0x01,0x4c,0x3c,0x50,
  0x05,0x4f,0xfc,0x54,
  0x29,0x53,0xf1,0x54,
  0x02,0x94,0x05,0x54,
  0x00,0x29,0x55,0x50,
  0x00,0x2a,0x55,0x40,
  0x02,0xa5,0x55,0x00,
  0x2a,0x55,0x54,0x00,
  0x00,0x0a,0xa0,0x00,
  0x00,0x2a,0xa8,0x00,
  0x00,0x00,0x00,0x00];
var cgalhobbindmask = [
  0xff,0xc0,0x00,0xff,
  0xff,0x00,0x00,0x3f,
  0xfc,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x03,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x0f,
  0xf0,0x00,0x00,0x3f,
  0xc0,0x00,0x00,0xff,
  0xf0,0x00,0x03,0xff,
  0xff,0x00,0x00,0xff,
  0xff,0xc0,0x03,0xff];

var cgabonus = [
  0x00,0x00,0x54,0x00,
  0x00,0x01,0x55,0x00,
  0x00,0x01,0x45,0x00,
  0x00,0x05,0x01,0x40,
  0x00,0x05,0x00,0x50,
  0x00,0x14,0x04,0x51,
  0x00,0x14,0x01,0x54,
  0x04,0x51,0x00,0x50,
  0x01,0x54,0x02,0xa0,
  0x02,0xa0,0x0b,0xe8,
  0x0b,0xe8,0x2f,0xaa,
  0x2b,0xaa,0x2a,0xaa,
  0x2a,0xaa,0x0a,0xa8,
  0x0a,0xa8,0x02,0xa0,
  0x02,0xa0,0x00,0x00];

var cgafire1 = [
  0x03,0xc0,
  0x2c,0xbe,
  0x3b,0xcc,
  0xf3,0xfb,
  0x3c,0xfc,
  0x33,0xcc,
  0x33,0xb0];
var cgafire1mask = [
  0xc0,0x03,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0xc0,0x03];
var cgafire2 = [
  0x0b,0x88,
  0x3c,0xae,
  0x0a,0xc8,
  0xf3,0xba,
  0xac,0x8e,
  0xa3,0xa2,
  0x23,0x88];
var cgafire2mask = [
  0xc0,0x33,
  0x00,0x00,
  0x00,0x03,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0xcc,0x03];
var cgafire3 = [
  0x0a,0x28,
  0x23,0xa2,
  0x8a,0x8a,
  0xb3,0xa8,
  0x2a,0xba,
  0xa3,0xa3,
  0x0a,0x88];
var cgafire3mask = [
  0xc0,0x03,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0xc0,0x03];
var cgaexp1 = [
  0x00,0x00,
  0x30,0x0c,
  0x0e,0xb0,
  0x02,0x80,
  0x0e,0xb0,
  0x30,0x0c,
  0x00,0x00];
var cgaexp1mask = [
  0x0f,0xf0,
  0x00,0x00,
  0xc0,0x03,
  0xf0,0x0f,
  0xc0,0x03,
  0x00,0x00,
  0x0f,0xf0];
var cgaexp2 = [
  0xc0,0x03,
  0x30,0x0c,
  0x08,0x20,
  0x00,0x00,
  0x08,0x20,
  0x30,0x0c,
  0xc0,0x03];
var cgaexp2mask = [
  0x0f,0xf0,
  0x03,0xc0,
  0xc3,0xc3,
  0xf3,0xcf,
  0xc3,0xc3,
  0x03,0xc0,
  0x0f,0xf0];
var cgaexp3 = [
  0x80,0x02,
  0x30,0x0c,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x30,0x0c,
  0x80,0x02];
var cgaexp3mask = [
  0x0f,0xf0,
  0x03,0xc0,
  0xcf,0xf3,
  0xff,0xff,
  0xcf,0xf3,
  0x03,0xc0,
  0x0f,0xf0];

var cgaback1 = [
  0xaf,0xff,0xaa,0xff,0xfa,
  0xeb,0xfe,0xbe,0xbf,0xeb,
  0xfa,0xfa,0xff,0xaf,0xaf,
  0xfe,0xab,0xff,0xea,0xbf];
var cgaback2 = [
  0x5a,0x5a,0x5a,0x5a,0x5a,
  0x96,0x96,0x96,0x96,0x96,
  0xa5,0xa5,0xa5,0xa5,0xa5,
  0x96,0x96,0x96,0x96,0x96];
var cgaback3 = [
  0xaf,0xaf,0xaf,0xaf,0xaf,
  0xeb,0xeb,0xeb,0xeb,0xeb,
  0xfa,0xfa,0xfa,0xfa,0xfa,
  0xbe,0xbe,0xbe,0xbe,0xbe];
var cgaback4 = [
  0x5f,0xff,0x55,0xff,0xf5,
  0xd7,0xfd,0x7d,0x7f,0xd7,
  0xf5,0xf5,0xff,0x5f,0x5f,
  0xfd,0x57,0xff,0xd5,0x7f];
var cgaback5 = [
  0xaf,0xff,0xaa,0xff,0xfa,
  0xd7,0xfd,0x7d,0x7f,0xd7,
  0xfa,0xfa,0xff,0xaf,0xaf,
  0xfd,0x57,0xff,0xd5,0x7f];
var cgaback6 = [
  0x5a,0x5a,0x5a,0x5a,0x5a,
  0x96,0x96,0x96,0x96,0x96,
  0x5a,0x5a,0x5a,0x5a,0x5a,
  0x96,0x96,0x96,0x96,0x96];
var cgaback7 = [
  0xaf,0xaf,0xaf,0xaf,0xaf,
  0xd7,0xd7,0xd7,0xd7,0xd7,
  0xf5,0xf5,0xf5,0xf5,0xf5,
  0xbe,0xbe,0xbe,0xbe,0xbe];
var cgaback8 = [
  0xfa,0xfa,0xfa,0xfa,0xfa,
  0xbe,0xbe,0xbe,0xbe,0xbe,
  0xaf,0xaf,0xaf,0xaf,0xaf,
  0xbe,0xbe,0xbe,0xbe,0xbe];

var cgarightblobmask = [
  0xf0,0xff,
  0x00,0xff,
  0x00,0x3f,
  0x00,0x0f,
  0x00,0x0f,
  0x00,0x03,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x03,
  0x00,0x0f,
  0x00,0x3f,
  0x00,0x3f,
  0xc3,0xff,
  0x0f,0xff];
var cgatopblobmask = [
  0xff,0xff,0xc0,0x03,0xff,0xff,
  0xff,0xfc,0x00,0x00,0x3f,0xff,
  0xff,0xf0,0x00,0x00,0x03,0xff,
  0xfc,0x00,0x00,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x00,0x00,0xff,
  0xff,0x00,0x00,0x00,0x00,0x0f];
var cgaleftblobmask = [
  0xff,0xf0,
  0xff,0x00,
  0xfc,0x00,
  0xf0,0x00,
  0xf0,0x00,
  0xc0,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0x00,0x00,
  0xc0,0x00,
  0xf0,0x00,
  0xf0,0x00,
  0xfc,0x00,
  0xff,0xc3,
  0xff,0x0f];
var cgabottomblobmask = [
  0xfc,0x00,0x00,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x00,0x00,0xff,
  0xff,0x00,0x00,0x00,0x00,0x0f,
  0xff,0xc0,0x00,0x00,0x03,0xff,
  0xff,0xfc,0x00,0x00,0x3f,0xff,
  0xff,0xff,0xc0,0x03,0xff,0xff];
var cgasquareblobmask = [
  0xf0,0xf0,0xf0,0xf0,0xf0,0xff,
  0xfc,0x00,0x00,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x00,0x00,0xff,
  0xff,0x00,0x00,0x00,0x00,0x0f,
  0xff,0xc0,0x00,0x00,0x00,0x3f,
  0xff,0x00,0x00,0x00,0x00,0xff];
var cgafurryblobmask = [
  0xfc,0x3c,0x3c,0x3c,0x3c,0x3f,
  0xf0,0x00,0x00,0x00,0x00,0xff,
  0xff,0x00,0x00,0x00,0x00,0x0f,
  0xfc,0x00,0x00,0x00,0x00,0x3f,
  0xf0,0x00,0x00,0x00,0x00,0xff,
  0xff,0x00,0x00,0x00,0x00,0x0f,
  0xff,0xc3,0xc3,0xc3,0xc3,0xff,
  0xff,0x0f,0x0f,0x0f,0x0f,0xff];

var cgaemerald = [
  0x00,0x00,0x00,0x00,
  0x00,0x05,0x55,0x40,
  0x00,0x17,0x55,0x50,
  0x00,0x5d,0x55,0x54,
  0x00,0x17,0x55,0x10,
  0x00,0x05,0x54,0x40,
  0x00,0x01,0x51,0x00,
  0x00,0x00,0x54,0x00,
  0x00,0x00,0x10,0x00,
  0x00,0x00,0x00,0x00];
var cgaemeraldmask = [
  0xff,0xc0,0x00,0x0f,
  0xff,0x00,0x00,0x03,
  0xfc,0x00,0x00,0x00,
  0xf0,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x00,
  0xff,0x00,0x00,0x03,
  0xff,0xc0,0x00,0x0f,
  0xff,0xf0,0x00,0x3f,
  0xff,0xfc,0x00,0xff,
  0xff,0xff,0x03,0xff];

var cgaliferight = [
  0x00,0x0f,0x00,0x00,
  0x00,0x3f,0xc0,0x00,
  0x00,0x30,0xc0,0x00,
  0x02,0xaa,0xa1,0x55,
  0x0a,0xaa,0xa5,0x55,
  0x2a,0xaa,0xa5,0x00,
  0xaa,0xaa,0xa5,0x55,
  0x82,0xa8,0x21,0x55,
  0x3c,0xa3,0xc0,0x00,
  0xc3,0x0c,0x30,0x00,
  0xc3,0x0c,0x30,0x00,
  0x3c,0x03,0xc0,0x00];
var cgaliferightmask = [
  0xff,0xc0,0x3f,0xff,
  0xff,0x00,0x0f,0xff,
  0xfc,0x00,0x0c,0x00,
  0xf0,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x0c,0x00,
  0x00,0x00,0x03,0xff,
  0x00,0x00,0x03,0xff,
  0x00,0xf0,0x0f,0xff];
var cgalifeleft = [
  0x00,0x00,0xf0,0x00,
  0x00,0x03,0xfc,0x00,
  0x00,0x03,0x0c,0x00,
  0x55,0x4a,0xaa,0x80,
  0x55,0x5a,0xaa,0xa0,
  0x00,0x5a,0xaa,0xa8,
  0x55,0x5a,0xaa,0xaa,
  0x55,0x48,0x2a,0x82,
  0x00,0x03,0xca,0x3c,
  0x00,0x0c,0x30,0xc3,
  0x00,0x0c,0x30,0xc3,
  0x00,0x03,0xc0,0x3c];
var cgalifeleftmask = [
  0xff,0xfc,0x03,0xff,
  0xff,0xf0,0x00,0xff,
  0x00,0x30,0x00,0x3f,
  0x00,0x00,0x00,0x0f,
  0x00,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x30,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xc0,0x00,0x00,
  0xff,0xf0,0x0f,0x00];
var cgaelifemask = [
  0xc0,0x00,0x00,0x03,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,
  0xc0,0x00,0x00,0x03];

return {

cgatable: [
  cgazero60,    cgaediggermask,    /* 0 */
  cgardigger1,  cgardigger1mask,
  cgardigger2,  cgardigger2mask,
  cgardigger3,  cgardigger3mask,
  cgarxdigger1, cgarxdigger1mask,
  cgarxdigger2, cgarxdigger2mask,  /* 5 */
  cgarxdigger3, cgarxdigger3mask,
  cgaudigger1,  cgaudigger1mask,
  cgaudigger2,  cgaudigger2mask,
  cgaudigger3,  cgaudigger3mask,
  cgauxdigger1, cgauxdigger1mask,  /* 10 */
  cgauxdigger2, cgauxdigger2mask,
  cgauxdigger3, cgauxdigger3mask,
  cgaldigger1,  cgaldigger1mask,
  cgaldigger2,  cgaldigger2mask,
  cgaldigger3,  cgaldigger3mask,   /* 15 */
  cgalxdigger1, cgalxdigger1mask,
  cgalxdigger2, cgalxdigger2mask,
  cgalxdigger3, cgalxdigger3mask,
  cgaddigger1,  cgaddigger1mask,
  cgaddigger2,  cgaddigger2mask,   /* 20 */
  cgaddigger3,  cgaddigger3mask,
  cgadxdigger1, cgadxdigger1mask,
  cgadxdigger2, cgadxdigger2mask,
  cgadxdigger3, cgadxdigger3mask,
  cgadiggerd,   cgadiggerdmask,    /* 25 */
  cgagrave1,    cgagrave1mask,
  cgagrave2,    cgagrave2mask,
  cgagrave3,    cgagrave3mask,
  cgagrave4,    cgagrave4mask,
  cgagrave5,    cgagrave5mask,     /* 30 */

  cgazero60,    cgaediggermask,
  cgardigger1,  cgardigger1mask,
  cgardigger2,  cgardigger2mask,
  cgardigger3,  cgardigger3mask,
  cgarxdigger1, cgarxdigger1mask,  /* 35 */
  cgarxdigger2, cgarxdigger2mask,
  cgarxdigger3, cgarxdigger3mask,
  cgaudigger1,  cgaudigger1mask,
  cgaudigger2,  cgaudigger2mask,
  cgaudigger3,  cgaudigger3mask,   /* 40 */
  cgauxdigger1, cgauxdigger1mask,
  cgauxdigger2, cgauxdigger2mask,
  cgauxdigger3, cgauxdigger3mask,
  cgaldigger1,  cgaldigger1mask,
  cgaldigger2,  cgaldigger2mask,   /* 45 */
  cgaldigger3,  cgaldigger3mask,
  cgalxdigger1, cgalxdigger1mask,
  cgalxdigger2, cgalxdigger2mask,
  cgalxdigger3, cgalxdigger3mask,
  cgaddigger1,  cgaddigger1mask,   /* 50 */
  cgaddigger2,  cgaddigger2mask,
  cgaddigger3,  cgaddigger3mask,
  cgadxdigger1, cgadxdigger1mask,
  cgadxdigger2, cgadxdigger2mask,
  cgadxdigger3, cgadxdigger3mask,  /* 55 */
  cgadiggerd,   cgadiggerdmask,
  cgagrave1,    cgagrave1mask,
  cgagrave2,    cgagrave2mask,
  cgagrave3,    cgagrave3mask,
  cgagrave4,    cgagrave4mask,     /* 60 */
  cgagrave5,    cgagrave5mask,

  cgasbag,      cgasbagmask,
  cgarbag,      cgarbagmask,
  cgalbag,      cgalbagmask,
  cgafbag,      cgafbagmask,       /* 65 */
  cgagold1,     cgagold1mask,
  cgagold2,     cgagold2mask,
  cgagold3,     cgagold3mask,

  cganobbin1,   cganobbin1mask,
  cganobbin2,   cganobbin2mask,    /* 70 */
  cganobbin3,   cganobbin3mask,
  cganobbind,   cganobbindmask,
  cgarhobbin1,  cgarhobbin1mask,
  cgarhobbin2,  cgarhobbin2mask,
  cgarhobbin3,  cgarhobbin3mask,   /* 75 */
  cgarhobbind,  cgarhobbindmask,
  cgalhobbin1,  cgalhobbin1mask,
  cgalhobbin2,  cgalhobbin2mask,
  cgalhobbin3,  cgalhobbin3mask,
  cgalhobbind,  cgalhobbindmask,   /* 80 */

  cgabonus,     cgaediggermask,

  cgafire1,     cgafire1mask,
  cgafire2,     cgafire2mask,
  cgafire3,     cgafire3mask,
  cgaexp1,      cgaexp1mask,       /* 85 */
  cgaexp2,      cgaexp2mask,
  cgaexp3,      cgaexp3mask,

  cgafire1,     cgafire1mask,
  cgafire2,     cgafire2mask,
  cgafire3,     cgafire3mask,      /* 90 */
  cgaexp1,      cgaexp1mask,
  cgaexp2,      cgaexp2mask,
  cgaexp3,      cgaexp3mask,

  cgaback1,     cgazero60,
  cgaback2,     cgazero60,         /* 95 */
  cgaback3,     cgazero60,
  cgaback4,     cgazero60,
  cgaback5,     cgazero60,
  cgaback6,     cgazero60,
  cgaback7,     cgazero60,         /* 100 */
  cgaback8,     cgazero60,

  cgazero60,    cgarightblobmask,
  cgazero60,    cgatopblobmask,
  cgazero60,    cgaleftblobmask,
  cgazero60,    cgabottomblobmask, /* 105 */
  cgazero60,    cgasquareblobmask,
  cgazero60,    cgafurryblobmask,

  cgaemerald,   cgaemeraldmask,
  cgazero60,    cgaemeraldmask,

  cgaliferight, cgaliferightmask,  /* 110 */
  cgalifeleft,  cgalifeleftmask,
  cgazero60,    cgaelifemask ],

cgatitledat: [
  254,0,0,254,0,0,254,208,0,254,80,170,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,254,80,170,254,164,0,60,0,
  240,0,0,63,240,60,63,240,15,254,7,0,255,254,8,0,240,3,252,0,
  255,254,5,0,255,195,254,5,0,63,192,15,254,32,0,3,0,0,3,0,
  0,3,192,60,3,192,254,8,0,15,254,10,0,60,0,15,254,4,0,60,
  0,15,254,4,0,3,192,240,15,254,32,0,12,3,3,0,192,0,0,240,
  207,15,0,255,0,63,255,240,0,0,63,255,0,63,255,240,15,240,0,15,
  240,0,60,0,15,254,4,0,15,0,3,0,3,255,0,63,252,0,255,252,
  15,255,15,15,252,3,255,0,3,255,255,0,15,252,254,17,0,12,12,0,
  0,192,0,0,240,207,12,0,15,0,3,192,3,192,15,0,15,0,3,240,
  3,240,3,192,0,240,0,60,0,15,254,5,0,255,192,0,240,0,240,3,
  192,0,15,0,0,240,51,195,0,15,0,240,0,60,3,192,240,3,192,254,
  16,0,12,3,3,0,192,0,0,63,3,240,0,15,0,3,192,3,192,15,
  0,15,0,3,192,3,192,3,192,0,240,0,60,0,15,254,6,0,63,0,
  240,0,240,3,192,0,15,0,0,60,51,195,0,0,60,240,0,60,0,0,
  255,255,192,254,3,0,3,240,254,6,15,254,5,0,3,0,0,3,254,3,
  0,63,3,240,0,15,0,3,192,3,192,15,0,15,0,3,192,3,192,3,
  192,0,240,0,60,0,15,254,4,0,12,0,3,192,240,0,240,3,192,0,
  15,0,0,15,192,252,0,15,0,240,0,60,0,0,240,254,6,0,240,3,
  255,3,252,0,252,254,6,0,60,0,240,254,3,0,12,0,192,0,15,0,
  3,192,3,192,3,192,255,0,3,192,3,192,3,192,0,240,0,60,0,15,
  254,4,0,15,240,15,0,60,3,192,3,192,0,3,195,0,3,0,48,0,
  15,3,240,0,60,0,0,60,15,254,5,0,240,0,60,254,4,15,254,0,
  0,254,0,0,254,0,0,254,146,0,254,80,170,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,
  0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,
  168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,
  39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,
  170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,
  38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,
  42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,
  254,39,0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,
  0,170,254,38,0,42,168,254,39,0,170,254,38,0,42,168,254,39,0,170,
  254,38,0,42,254,80,170,254,164,0,3,255,254,78,0,192,0,12,0,0,
  3,192,60,3,192,15,254,7,0,15,254,8,0,240,0,60,0,15,254,4,
  0,15,192,63,254,5,0,192,240,15,254,32,0,3,0,252,3,254,3,0,
  240,207,3,254,9,0,15,254,10,0,60,0,15,254,4,0,60,0,3,254,
  4,0,3,192,0,15,254,32,0,12,12,0,0,192,0,0,240,207,12,0,
  15,0,3,240,15,0,3,192,63,0,3,240,15,240,15,0,0,240,0,60,
  0,15,254,4,0,3,252,0,0,60,3,192,3,192,0,15,0,0,240,15,
  0,192,15,0,192,0,63,3,192,60,15,254,17,0,12,12,0,0,192,0,
  0,63,3,252,0,15,0,3,192,3,192,15,0,15,0,3,192,3,192,3,
  192,0,240,0,60,0,15,254,5,0,3,252,0,240,0,240,3,192,0,15,
  0,0,60,51,195,0,0,3,240,0,60,0,0,240,3,192,254,4,0,240,
  3,252,3,252,3,252,254,5,0,3,0,252,3,254,3,0,63,3,240,0,
  15,0,3,192,3,192,15,0,15,0,3,192,3,192,3,192,0,240,0,60,
  0,15,254,4,0,12,0,3,192,240,0,240,3,192,0,15,0,0,15,192,
  252,0,3,192,240,0,60,0,0,240,254,6,0,240,254,4,15,0,15,254,
  6,0,192,0,12,254,3,0,12,0,192,0,15,0,3,192,3,192,15,0,
  15,0,3,192,3,192,3,192,0,240,0,60,0,15,254,4,0,15,0,3,
  192,240,0,240,3,192,0,15,3,0,15,192,252,0,15,0,240,0,60,0,
  0,240,0,192,254,4,0,240,0,254,3,15,0,15,254,6,0,3,255,254,
  4,0,12,0,192,0,255,240,63,252,63,252,0,255,15,252,63,252,63,252,
  63,252,15,255,3,255,192,255,240,254,3,0,12,15,240,0,15,252,0,63,
  252,0,0,252,0,3,0,48,0,3,252,63,3,255,192,0,15,240,254,4,
  0,15,255,3,240,3,252,3,252,0,0,0,0,0,0,0]
}

}());
